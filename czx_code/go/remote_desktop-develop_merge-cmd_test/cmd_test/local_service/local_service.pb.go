// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: local_service.proto

package local_service

import (
	common "common/"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息类型
type MessageType int32

const (
	MessageType_msg_heart                              MessageType = 0
	MessageType_msg_exit                               MessageType = 1
	MessageType_msg_check                              MessageType = 2
	MessageType_msg_check_response                     MessageType = 3
	MessageType_msg_get_login_account                  MessageType = 4
	MessageType_msg_get_login_account_response         MessageType = 5
	MessageType_msg_update_ui_config                   MessageType = 6
	MessageType_msg_update_service_config              MessageType = 7
	MessageType_msg_register_capturer_port             MessageType = 8
	MessageType_msg_register_capturer_port_response    MessageType = 9
	MessageType_msg_connect_peer                       MessageType = 10
	MessageType_msg_connect_peer_response              MessageType = 11
	MessageType_msg_service_state                      MessageType = 12
	MessageType_msg_cancel_connect_peer                MessageType = 13
	MessageType_msg_login                              MessageType = 14
	MessageType_msg_login_response                     MessageType = 15
	MessageType_msg_sdn_route_changed                  MessageType = 16
	MessageType_msg_connection_count                   MessageType = 17
	MessageType_msg_peer_connected                     MessageType = 18
	MessageType_msg_peer_disconnected                  MessageType = 19
	MessageType_msg_device_control_switch              MessageType = 20
	MessageType_msg_upgrade_software                   MessageType = 21
	MessageType_msg_register_clipboard_port            MessageType = 22
	MessageType_msg_register_clipboard_port_response   MessageType = 23
	MessageType_msg_synchronize_client_state           MessageType = 24
	MessageType_msg_device_control_switch_response     MessageType = 25
	MessageType_msg_register_rayfile_port              MessageType = 26
	MessageType_msg_register_rayfile_port_response     MessageType = 27
	MessageType_msg_function_list                      MessageType = 28
	MessageType_msg_set_proxy                          MessageType = 29
	MessageType_msg_send_full_screen_to_peer           MessageType = 30
	MessageType_msg_send_full_screen_to_peer_response  MessageType = 31
	MessageType_msg_register_webrtc_token              MessageType = 32
	MessageType_msg_register_webrtc_token_response     MessageType = 33
	MessageType_msg_limit_file_transfer_speed          MessageType = 34
	MessageType_msg_limit_file_transfer_speed_response MessageType = 35
	MessageType_msg_send_chat_message                  MessageType = 36
	MessageType_msg_send_chat_message_response         MessageType = 37
	MessageType_msg_mirror_or_extend_screen            MessageType = 38
	MessageType_msg_mirror_or_extend_screen_response   MessageType = 39
	MessageType_msg_report_log_file                    MessageType = 40
	MessageType_msg_report_log_file_response           MessageType = 41
	MessageType_msg_execute_program                    MessageType = 42
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "msg_heart",
		1:  "msg_exit",
		2:  "msg_check",
		3:  "msg_check_response",
		4:  "msg_get_login_account",
		5:  "msg_get_login_account_response",
		6:  "msg_update_ui_config",
		7:  "msg_update_service_config",
		8:  "msg_register_capturer_port",
		9:  "msg_register_capturer_port_response",
		10: "msg_connect_peer",
		11: "msg_connect_peer_response",
		12: "msg_service_state",
		13: "msg_cancel_connect_peer",
		14: "msg_login",
		15: "msg_login_response",
		16: "msg_sdn_route_changed",
		17: "msg_connection_count",
		18: "msg_peer_connected",
		19: "msg_peer_disconnected",
		20: "msg_device_control_switch",
		21: "msg_upgrade_software",
		22: "msg_register_clipboard_port",
		23: "msg_register_clipboard_port_response",
		24: "msg_synchronize_client_state",
		25: "msg_device_control_switch_response",
		26: "msg_register_rayfile_port",
		27: "msg_register_rayfile_port_response",
		28: "msg_function_list",
		29: "msg_set_proxy",
		30: "msg_send_full_screen_to_peer",
		31: "msg_send_full_screen_to_peer_response",
		32: "msg_register_webrtc_token",
		33: "msg_register_webrtc_token_response",
		34: "msg_limit_file_transfer_speed",
		35: "msg_limit_file_transfer_speed_response",
		36: "msg_send_chat_message",
		37: "msg_send_chat_message_response",
		38: "msg_mirror_or_extend_screen",
		39: "msg_mirror_or_extend_screen_response",
		40: "msg_report_log_file",
		41: "msg_report_log_file_response",
		42: "msg_execute_program",
	}
	MessageType_value = map[string]int32{
		"msg_heart":                              0,
		"msg_exit":                               1,
		"msg_check":                              2,
		"msg_check_response":                     3,
		"msg_get_login_account":                  4,
		"msg_get_login_account_response":         5,
		"msg_update_ui_config":                   6,
		"msg_update_service_config":              7,
		"msg_register_capturer_port":             8,
		"msg_register_capturer_port_response":    9,
		"msg_connect_peer":                       10,
		"msg_connect_peer_response":              11,
		"msg_service_state":                      12,
		"msg_cancel_connect_peer":                13,
		"msg_login":                              14,
		"msg_login_response":                     15,
		"msg_sdn_route_changed":                  16,
		"msg_connection_count":                   17,
		"msg_peer_connected":                     18,
		"msg_peer_disconnected":                  19,
		"msg_device_control_switch":              20,
		"msg_upgrade_software":                   21,
		"msg_register_clipboard_port":            22,
		"msg_register_clipboard_port_response":   23,
		"msg_synchronize_client_state":           24,
		"msg_device_control_switch_response":     25,
		"msg_register_rayfile_port":              26,
		"msg_register_rayfile_port_response":     27,
		"msg_function_list":                      28,
		"msg_set_proxy":                          29,
		"msg_send_full_screen_to_peer":           30,
		"msg_send_full_screen_to_peer_response":  31,
		"msg_register_webrtc_token":              32,
		"msg_register_webrtc_token_response":     33,
		"msg_limit_file_transfer_speed":          34,
		"msg_limit_file_transfer_speed_response": 35,
		"msg_send_chat_message":                  36,
		"msg_send_chat_message_response":         37,
		"msg_mirror_or_extend_screen":            38,
		"msg_mirror_or_extend_screen_response":   39,
		"msg_report_log_file":                    40,
		"msg_report_log_file_response":           41,
		"msg_execute_program":                    42,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_local_service_proto_enumTypes[0].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_local_service_proto_enumTypes[0]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{0}
}

type ConnectType int32

const (
	// 远程控制
	ConnectType_control ConnectType = 0
	// 文件
	ConnectType_file ConnectType = 1
	// 镜像
	ConnectType_mirror ConnectType = 2
	// 扩展
	ConnectType_extend ConnectType = 3
)

// Enum value maps for ConnectType.
var (
	ConnectType_name = map[int32]string{
		0: "control",
		1: "file",
		2: "mirror",
		3: "extend",
	}
	ConnectType_value = map[string]int32{
		"control": 0,
		"file":    1,
		"mirror":  2,
		"extend":  3,
	}
)

func (x ConnectType) Enum() *ConnectType {
	p := new(ConnectType)
	*p = x
	return p
}

func (x ConnectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConnectType) Descriptor() protoreflect.EnumDescriptor {
	return file_local_service_proto_enumTypes[1].Descriptor()
}

func (ConnectType) Type() protoreflect.EnumType {
	return &file_local_service_proto_enumTypes[1]
}

func (x ConnectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConnectType.Descriptor instead.
func (ConnectType) EnumDescriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{1}
}

type UpdateServiceConfigKeyUpdateModeT int32

const (
	UpdateServiceConfig_custom       UpdateServiceConfigKeyUpdateModeT = 0
	UpdateServiceConfig_everyday     UpdateServiceConfigKeyUpdateModeT = 1
	UpdateServiceConfig_remote_after UpdateServiceConfigKeyUpdateModeT = 2
)

// Enum value maps for UpdateServiceConfigKeyUpdateModeT.
var (
	UpdateServiceConfigKeyUpdateModeT_name = map[int32]string{
		0: "custom",
		1: "everyday",
		2: "remote_after",
	}
	UpdateServiceConfigKeyUpdateModeT_value = map[string]int32{
		"custom":       0,
		"everyday":     1,
		"remote_after": 2,
	}
)

func (x UpdateServiceConfigKeyUpdateModeT) Enum() *UpdateServiceConfigKeyUpdateModeT {
	p := new(UpdateServiceConfigKeyUpdateModeT)
	*p = x
	return p
}

func (x UpdateServiceConfigKeyUpdateModeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateServiceConfigKeyUpdateModeT) Descriptor() protoreflect.EnumDescriptor {
	return file_local_service_proto_enumTypes[2].Descriptor()
}

func (UpdateServiceConfigKeyUpdateModeT) Type() protoreflect.EnumType {
	return &file_local_service_proto_enumTypes[2]
}

func (x UpdateServiceConfigKeyUpdateModeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateServiceConfigKeyUpdateModeT.Descriptor instead.
func (UpdateServiceConfigKeyUpdateModeT) EnumDescriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{7, 0}
}

type UpdateServiceConfigKeyAccessModeT int32

const (
	UpdateServiceConfig_temp       UpdateServiceConfigKeyAccessModeT = 0
	UpdateServiceConfig_fixed      UpdateServiceConfigKeyAccessModeT = 1
	UpdateServiceConfig_fixed_temp UpdateServiceConfigKeyAccessModeT = 2
)

// Enum value maps for UpdateServiceConfigKeyAccessModeT.
var (
	UpdateServiceConfigKeyAccessModeT_name = map[int32]string{
		0: "temp",
		1: "fixed",
		2: "fixed_temp",
	}
	UpdateServiceConfigKeyAccessModeT_value = map[string]int32{
		"temp":       0,
		"fixed":      1,
		"fixed_temp": 2,
	}
)

func (x UpdateServiceConfigKeyAccessModeT) Enum() *UpdateServiceConfigKeyAccessModeT {
	p := new(UpdateServiceConfigKeyAccessModeT)
	*p = x
	return p
}

func (x UpdateServiceConfigKeyAccessModeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateServiceConfigKeyAccessModeT) Descriptor() protoreflect.EnumDescriptor {
	return file_local_service_proto_enumTypes[3].Descriptor()
}

func (UpdateServiceConfigKeyAccessModeT) Type() protoreflect.EnumType {
	return &file_local_service_proto_enumTypes[3]
}

func (x UpdateServiceConfigKeyAccessModeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateServiceConfigKeyAccessModeT.Descriptor instead.
func (UpdateServiceConfigKeyAccessModeT) EnumDescriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{7, 1}
}

type ServiceStateConnectionStateT int32

const (
	ServiceState_none         ServiceStateConnectionStateT = 0
	ServiceState_connected    ServiceStateConnectionStateT = 1
	ServiceState_disconnected ServiceStateConnectionStateT = 2
)

// Enum value maps for ServiceStateConnectionStateT.
var (
	ServiceStateConnectionStateT_name = map[int32]string{
		0: "none",
		1: "connected",
		2: "disconnected",
	}
	ServiceStateConnectionStateT_value = map[string]int32{
		"none":         0,
		"connected":    1,
		"disconnected": 2,
	}
)

func (x ServiceStateConnectionStateT) Enum() *ServiceStateConnectionStateT {
	p := new(ServiceStateConnectionStateT)
	*p = x
	return p
}

func (x ServiceStateConnectionStateT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStateConnectionStateT) Descriptor() protoreflect.EnumDescriptor {
	return file_local_service_proto_enumTypes[4].Descriptor()
}

func (ServiceStateConnectionStateT) Type() protoreflect.EnumType {
	return &file_local_service_proto_enumTypes[4]
}

func (x ServiceStateConnectionStateT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStateConnectionStateT.Descriptor instead.
func (ServiceStateConnectionStateT) EnumDescriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{12, 0}
}

type SdnRouteChangedSdnRouteTypeT int32

const (
	// 中转
	SdnRouteChanged_forward SdnRouteChangedSdnRouteTypeT = 0
	// 直连
	SdnRouteChanged_direct SdnRouteChangedSdnRouteTypeT = 1
	// TCP
	SdnRouteChanged_tcp SdnRouteChangedSdnRouteTypeT = 2
)

// Enum value maps for SdnRouteChangedSdnRouteTypeT.
var (
	SdnRouteChangedSdnRouteTypeT_name = map[int32]string{
		0: "forward",
		1: "direct",
		2: "tcp",
	}
	SdnRouteChangedSdnRouteTypeT_value = map[string]int32{
		"forward": 0,
		"direct":  1,
		"tcp":     2,
	}
)

func (x SdnRouteChangedSdnRouteTypeT) Enum() *SdnRouteChangedSdnRouteTypeT {
	p := new(SdnRouteChangedSdnRouteTypeT)
	*p = x
	return p
}

func (x SdnRouteChangedSdnRouteTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SdnRouteChangedSdnRouteTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_local_service_proto_enumTypes[5].Descriptor()
}

func (SdnRouteChangedSdnRouteTypeT) Type() protoreflect.EnumType {
	return &file_local_service_proto_enumTypes[5]
}

func (x SdnRouteChangedSdnRouteTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SdnRouteChangedSdnRouteTypeT.Descriptor instead.
func (SdnRouteChangedSdnRouteTypeT) EnumDescriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{16, 0}
}

type SetProxyProxyTypeT int32

const (
	// 关闭
	SetProxy_none SetProxyProxyTypeT = 0
	// HTTP 代理
	SetProxy_http SetProxyProxyTypeT = 1
	// Socks5代理
	SetProxy_socks5 SetProxyProxyTypeT = 2
)

// Enum value maps for SetProxyProxyTypeT.
var (
	SetProxyProxyTypeT_name = map[int32]string{
		0: "none",
		1: "http",
		2: "socks5",
	}
	SetProxyProxyTypeT_value = map[string]int32{
		"none":   0,
		"http":   1,
		"socks5": 2,
	}
)

func (x SetProxyProxyTypeT) Enum() *SetProxyProxyTypeT {
	p := new(SetProxyProxyTypeT)
	*p = x
	return p
}

func (x SetProxyProxyTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetProxyProxyTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_local_service_proto_enumTypes[6].Descriptor()
}

func (SetProxyProxyTypeT) Type() protoreflect.EnumType {
	return &file_local_service_proto_enumTypes[6]
}

func (x SetProxyProxyTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetProxyProxyTypeT.Descriptor instead.
func (SetProxyProxyTypeT) EnumDescriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{29, 0}
}

// 心跳消息   UI <-> Service   Watch <-> Service
type Heart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *Heart) Reset() {
	*x = Heart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heart) ProtoMessage() {}

func (x *Heart) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heart.ProtoReflect.Descriptor instead.
func (*Heart) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{0}
}

func (x *Heart) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type Exit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *Exit) Reset() {
	*x = Exit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Exit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Exit) ProtoMessage() {}

func (x *Exit) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Exit.ProtoReflect.Descriptor instead.
func (*Exit) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{1}
}

func (x *Exit) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 检查   UI -> Service   Watch -> Service
type Check struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 当前程序签名，Watch = raysync_watch   UI = raysync_ui   Service = raysync_service
	Sign     []byte `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
	DeviceId []byte `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *Check) Reset() {
	*x = Check{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Check) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Check) ProtoMessage() {}

func (x *Check) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Check.ProtoReflect.Descriptor instead.
func (*Check) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{2}
}

func (x *Check) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Check) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

func (x *Check) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// 检查响应   Service -> UI   Service -> Watch
type CheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 当前程序签名，Watch = raysync_watch   UI = raysync_ui   Service = raysync_service
	Sign []byte `protobuf:"bytes,2,opt,name=sign,proto3" json:"sign,omitempty"`
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{3}
}

func (x *CheckResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CheckResponse) GetSign() []byte {
	if x != nil {
		return x.Sign
	}
	return nil
}

type GetLoginAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *GetLoginAccount) Reset() {
	*x = GetLoginAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginAccount) ProtoMessage() {}

func (x *GetLoginAccount) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginAccount.ProtoReflect.Descriptor instead.
func (*GetLoginAccount) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{4}
}

func (x *GetLoginAccount) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type GetLoginAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 已登录成功的账号
	Account []byte `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *GetLoginAccountResponse) Reset() {
	*x = GetLoginAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoginAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoginAccountResponse) ProtoMessage() {}

func (x *GetLoginAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoginAccountResponse.ProtoReflect.Descriptor instead.
func (*GetLoginAccountResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetLoginAccountResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetLoginAccountResponse) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

type UpdateUiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID
	DeviceId           []byte `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3,oneof" json:"device_id,omitempty"`
	DeviceKey          []byte `protobuf:"bytes,2,opt,name=device_key,json=deviceKey,proto3,oneof" json:"device_key,omitempty"`
	DeviceFixedKey     []byte `protobuf:"bytes,3,opt,name=device_fixed_key,json=deviceFixedKey,proto3,oneof" json:"device_fixed_key,omitempty"`
	MirrorOrExtendMode *int32 `protobuf:"varint,4,opt,name=mirror_or_extend_mode,json=mirrorOrExtendMode,proto3,oneof" json:"mirror_or_extend_mode,omitempty"`
}

func (x *UpdateUiConfig) Reset() {
	*x = UpdateUiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUiConfig) ProtoMessage() {}

func (x *UpdateUiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUiConfig.ProtoReflect.Descriptor instead.
func (*UpdateUiConfig) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateUiConfig) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *UpdateUiConfig) GetDeviceKey() []byte {
	if x != nil {
		return x.DeviceKey
	}
	return nil
}

func (x *UpdateUiConfig) GetDeviceFixedKey() []byte {
	if x != nil {
		return x.DeviceFixedKey
	}
	return nil
}

func (x *UpdateUiConfig) GetMirrorOrExtendMode() int32 {
	if x != nil && x.MirrorOrExtendMode != nil {
		return *x.MirrorOrExtendMode
	}
	return 0
}

type UpdateServiceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备验证码
	DeviceKey []byte `protobuf:"bytes,1,opt,name=device_key,json=deviceKey,proto3,oneof" json:"device_key,omitempty"`
	// 密码更新方式
	KeyUpdateMode *UpdateServiceConfigKeyUpdateModeT `protobuf:"varint,2,opt,name=key_update_mode,json=keyUpdateMode,proto3,enum=local_service.UpdateServiceConfigKeyUpdateModeT,oneof" json:"key_update_mode,omitempty"`
	// 是否允许被远程控制
	AllowControlled *bool `protobuf:"varint,3,opt,name=allow_controlled,json=allowControlled,proto3,oneof" json:"allow_controlled,omitempty"`
	// 是否开启远程结束后锁定屏幕
	LockScreenOnClose *bool `protobuf:"varint,4,opt,name=lock_screen_on_close,json=lockScreenOnClose,proto3,oneof" json:"lock_screen_on_close,omitempty"`
	// 防止自动休眠设置
	BootAutoRest *bool `protobuf:"varint,5,opt,name=boot_auto_rest,json=bootAutoRest,proto3,oneof" json:"boot_auto_rest,omitempty"`
	// 密码访问模式
	KeyAccessMode *UpdateServiceConfigKeyAccessModeT `protobuf:"varint,6,opt,name=key_access_mode,json=keyAccessMode,proto3,enum=local_service.UpdateServiceConfigKeyAccessModeT,oneof" json:"key_access_mode,omitempty"`
	// 设备固定密码
	DeviceFixedKey []byte `protobuf:"bytes,7,opt,name=device_fixed_key,json=deviceFixedKey,proto3,oneof" json:"device_fixed_key,omitempty"`
	// 是否需要管理员验证
	VerifyAdministrator *bool `protobuf:"varint,8,opt,name=verify_administrator,json=verifyAdministrator,proto3,oneof" json:"verify_administrator,omitempty"`
	// 是否开启固定帧率
	EnableCapturerFixFps *bool `protobuf:"varint,9,opt,name=enable_capturer_fix_fps,json=enableCapturerFixFps,proto3,oneof" json:"enable_capturer_fix_fps,omitempty"`
	// 连接本机是否需要验证(不同账号)
	NeedVerifyDiffirentAccount *bool `protobuf:"varint,10,opt,name=need_verify_diffirent_account,json=needVerifyDiffirentAccount,proto3,oneof" json:"need_verify_diffirent_account,omitempty"`
	// 连接本机是否需要验证(相同账号)
	NoVerifySameAccount *bool `protobuf:"varint,11,opt,name=no_verify_same_account,json=noVerifySameAccount,proto3,oneof" json:"no_verify_same_account,omitempty"`
	// 本机已经开启镜像或者扩展屏功能
	MirrorOrExtendMode *bool `protobuf:"varint,12,opt,name=mirror_or_extend_mode,json=mirrorOrExtendMode,proto3,oneof" json:"mirror_or_extend_mode,omitempty"`
	// 本设备用户id
	UserId *int32 `protobuf:"varint,13,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
}

func (x *UpdateServiceConfig) Reset() {
	*x = UpdateServiceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceConfig) ProtoMessage() {}

func (x *UpdateServiceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceConfig.ProtoReflect.Descriptor instead.
func (*UpdateServiceConfig) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateServiceConfig) GetDeviceKey() []byte {
	if x != nil {
		return x.DeviceKey
	}
	return nil
}

func (x *UpdateServiceConfig) GetKeyUpdateMode() UpdateServiceConfigKeyUpdateModeT {
	if x != nil && x.KeyUpdateMode != nil {
		return *x.KeyUpdateMode
	}
	return UpdateServiceConfig_custom
}

func (x *UpdateServiceConfig) GetAllowControlled() bool {
	if x != nil && x.AllowControlled != nil {
		return *x.AllowControlled
	}
	return false
}

func (x *UpdateServiceConfig) GetLockScreenOnClose() bool {
	if x != nil && x.LockScreenOnClose != nil {
		return *x.LockScreenOnClose
	}
	return false
}

func (x *UpdateServiceConfig) GetBootAutoRest() bool {
	if x != nil && x.BootAutoRest != nil {
		return *x.BootAutoRest
	}
	return false
}

func (x *UpdateServiceConfig) GetKeyAccessMode() UpdateServiceConfigKeyAccessModeT {
	if x != nil && x.KeyAccessMode != nil {
		return *x.KeyAccessMode
	}
	return UpdateServiceConfig_temp
}

func (x *UpdateServiceConfig) GetDeviceFixedKey() []byte {
	if x != nil {
		return x.DeviceFixedKey
	}
	return nil
}

func (x *UpdateServiceConfig) GetVerifyAdministrator() bool {
	if x != nil && x.VerifyAdministrator != nil {
		return *x.VerifyAdministrator
	}
	return false
}

func (x *UpdateServiceConfig) GetEnableCapturerFixFps() bool {
	if x != nil && x.EnableCapturerFixFps != nil {
		return *x.EnableCapturerFixFps
	}
	return false
}

func (x *UpdateServiceConfig) GetNeedVerifyDiffirentAccount() bool {
	if x != nil && x.NeedVerifyDiffirentAccount != nil {
		return *x.NeedVerifyDiffirentAccount
	}
	return false
}

func (x *UpdateServiceConfig) GetNoVerifySameAccount() bool {
	if x != nil && x.NoVerifySameAccount != nil {
		return *x.NoVerifySameAccount
	}
	return false
}

func (x *UpdateServiceConfig) GetMirrorOrExtendMode() bool {
	if x != nil && x.MirrorOrExtendMode != nil {
		return *x.MirrorOrExtendMode
	}
	return false
}

func (x *UpdateServiceConfig) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

// Capturer注册本地端口   UI -> Service
type RegisterCapturerPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 本地侦听端口
	FreePort         int32 `protobuf:"varint,2,opt,name=free_port,json=freePort,proto3" json:"free_port,omitempty"`
	ProfessionalPort int32 `protobuf:"varint,3,opt,name=professional_port,json=professionalPort,proto3" json:"professional_port,omitempty"`
}

func (x *RegisterCapturerPort) Reset() {
	*x = RegisterCapturerPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCapturerPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCapturerPort) ProtoMessage() {}

func (x *RegisterCapturerPort) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCapturerPort.ProtoReflect.Descriptor instead.
func (*RegisterCapturerPort) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterCapturerPort) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *RegisterCapturerPort) GetFreePort() int32 {
	if x != nil {
		return x.FreePort
	}
	return 0
}

func (x *RegisterCapturerPort) GetProfessionalPort() int32 {
	if x != nil {
		return x.ProfessionalPort
	}
	return 0
}

// Capturer注册本地端口响应   Service -> UI
type RegisterCapturerPortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *RegisterCapturerPortResponse) Reset() {
	*x = RegisterCapturerPortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCapturerPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCapturerPortResponse) ProtoMessage() {}

func (x *RegisterCapturerPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCapturerPortResponse.ProtoReflect.Descriptor instead.
func (*RegisterCapturerPortResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterCapturerPortResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *RegisterCapturerPortResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 连接受控端   Service[主控] -> Service[受控]    -> UI[受控] (未输入Key时)
type ConnectPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 用户输入的受控端ID
	Id []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// 用户输入的受控端Key，可为空
	// 如果是作为镜像或者扩展屏连接，这里是受控端发过来的的auth_key
	Key []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// 当前机器名称
	MachineName []byte `protobuf:"bytes,4,opt,name=machine_name,json=machineName,proto3" json:"machine_name,omitempty"`
	// 当前登录账号
	Account []byte `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// 是否专业连接
	UseProfessional bool `protobuf:"varint,6,opt,name=use_professional,json=useProfessional,proto3" json:"use_professional,omitempty"`
	// 是否我的设备分组
	DeviceMine bool `protobuf:"varint,7,opt,name=device_mine,json=deviceMine,proto3" json:"device_mine,omitempty"`
	// 用户输入的管理员账号
	AdminAccount []byte `protobuf:"bytes,8,opt,name=admin_account,json=adminAccount,proto3" json:"admin_account,omitempty"`
	// 用户输入管理员密码
	AdminPassword []byte `protobuf:"bytes,9,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	// 房间号，仅发起WebRTC连接时使用
	RoomId []byte `protobuf:"bytes,10,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 连接类型
	IsFileConnect bool `protobuf:"varint,11,opt,name=is_file_connect,json=isFileConnect,proto3" json:"is_file_connect,omitempty"`
	// 当前主控端ID
	ControllId []byte `protobuf:"bytes,12,opt,name=controll_id,json=controllId,proto3" json:"controll_id,omitempty"`
	// 主控端平台
	MasterPlatform common.PlatformType `protobuf:"varint,13,opt,name=master_platform,json=masterPlatform,proto3,enum=PlatformType" json:"master_platform,omitempty"`
	// 连接类型
	Type ConnectType `protobuf:"varint,14,opt,name=type,proto3,enum=local_service.ConnectType" json:"type,omitempty"`
	// 免密连接
	NoPass bool `protobuf:"varint,15,opt,name=no_pass,json=noPass,proto3" json:"no_pass,omitempty"`
	// 非同账号正在连接中设备文件传输跳过验证密码
	DeviceSkipVerify bool `protobuf:"varint,16,opt,name=device_skip_verify,json=deviceSkipVerify,proto3" json:"device_skip_verify,omitempty"`
}

func (x *ConnectPeer) Reset() {
	*x = ConnectPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPeer) ProtoMessage() {}

func (x *ConnectPeer) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPeer.ProtoReflect.Descriptor instead.
func (*ConnectPeer) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{10}
}

func (x *ConnectPeer) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ConnectPeer) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConnectPeer) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ConnectPeer) GetMachineName() []byte {
	if x != nil {
		return x.MachineName
	}
	return nil
}

func (x *ConnectPeer) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *ConnectPeer) GetUseProfessional() bool {
	if x != nil {
		return x.UseProfessional
	}
	return false
}

func (x *ConnectPeer) GetDeviceMine() bool {
	if x != nil {
		return x.DeviceMine
	}
	return false
}

func (x *ConnectPeer) GetAdminAccount() []byte {
	if x != nil {
		return x.AdminAccount
	}
	return nil
}

func (x *ConnectPeer) GetAdminPassword() []byte {
	if x != nil {
		return x.AdminPassword
	}
	return nil
}

func (x *ConnectPeer) GetRoomId() []byte {
	if x != nil {
		return x.RoomId
	}
	return nil
}

func (x *ConnectPeer) GetIsFileConnect() bool {
	if x != nil {
		return x.IsFileConnect
	}
	return false
}

func (x *ConnectPeer) GetControllId() []byte {
	if x != nil {
		return x.ControllId
	}
	return nil
}

func (x *ConnectPeer) GetMasterPlatform() common.PlatformType {
	if x != nil {
		return x.MasterPlatform
	}
	return common.PlatformType_windows
}

func (x *ConnectPeer) GetType() ConnectType {
	if x != nil {
		return x.Type
	}
	return ConnectType_control
}

func (x *ConnectPeer) GetNoPass() bool {
	if x != nil {
		return x.NoPass
	}
	return false
}

func (x *ConnectPeer) GetDeviceSkipVerify() bool {
	if x != nil {
		return x.DeviceSkipVerify
	}
	return false
}

// 连接受控端响应   Service[受控] -> Service[主控]
type ConnectPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// Capturer port
	FreeCapturerPort         int32 `protobuf:"varint,3,opt,name=free_capturer_port,json=freeCapturerPort,proto3" json:"free_capturer_port,omitempty"`
	ProfessionalCapturerPort int32 `protobuf:"varint,4,opt,name=professional_capturer_port,json=professionalCapturerPort,proto3" json:"professional_capturer_port,omitempty"`
	// 本地http代理端口
	LocalProxyPort int32 `protobuf:"varint,5,opt,name=local_proxy_port,json=localProxyPort,proto3" json:"local_proxy_port,omitempty"`
	// 受控端机器名称
	MachineName []byte `protobuf:"bytes,6,opt,name=machine_name,json=machineName,proto3" json:"machine_name,omitempty"`
	// 目的端sdn id
	SdnId []byte `protobuf:"bytes,7,opt,name=sdn_id,json=sdnId,proto3" json:"sdn_id,omitempty"`
	// 受控端账户名称
	Account []byte `protobuf:"bytes,8,opt,name=account,proto3" json:"account,omitempty"`
	// 账号过期时间
	ExpireTime int64 `protobuf:"varint,9,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// 当前客户端是否支持专业连接
	SupportProfessionalConnection bool `protobuf:"varint,10,opt,name=support_professional_connection,json=supportProfessionalConnection,proto3" json:"support_professional_connection,omitempty"`
	// 剪切板服务端口
	ClipboardPort int32 `protobuf:"varint,11,opt,name=clipboard_port,json=clipboardPort,proto3" json:"clipboard_port,omitempty"`
	// 本地文件http代理端口
	LocalFileProxyPort int32 `protobuf:"varint,12,opt,name=local_file_proxy_port,json=localFileProxyPort,proto3" json:"local_file_proxy_port,omitempty"`
	// 当前客户端是否支持IDD
	SupportIdd bool `protobuf:"varint,13,opt,name=support_idd,json=supportIdd,proto3" json:"support_idd,omitempty"`
	// 文件传输服务端口
	RayfilePort int32 `protobuf:"varint,14,opt,name=rayfile_port,json=rayfilePort,proto3" json:"rayfile_port,omitempty"`
	// 平台
	Platform common.PlatformType `protobuf:"varint,15,opt,name=platform,proto3,enum=PlatformType" json:"platform,omitempty"`
	// 当前设备的最大上传速度
	UploadSpeed int32 `protobuf:"varint,16,opt,name=upload_speed,json=uploadSpeed,proto3" json:"upload_speed,omitempty"`
	// 对端不支持dxgi
	NotSupportDxgi bool `protobuf:"varint,17,opt,name=not_support_dxgi,json=notSupportDxgi,proto3" json:"not_support_dxgi,omitempty"`
	// 是否有独立显卡编码
	GpuEncode *bool `protobuf:"varint,18,opt,name=gpu_encode,json=gpuEncode,proto3,oneof" json:"gpu_encode,omitempty"`
	// 受控是否支持聊天
	ControlledSupportChat *bool `protobuf:"varint,19,opt,name=controlled_support_chat,json=controlledSupportChat,proto3,oneof" json:"controlled_support_chat,omitempty"`
	// 扩展屏 远程的屏幕下标
	ScreenIndex *int32 `protobuf:"varint,20,opt,name=screen_index,json=screenIndex,proto3,oneof" json:"screen_index,omitempty"`
	// 受控的cpu
	CpuInfo []byte `protobuf:"bytes,21,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"`
	// 受控的gpu
	GpuInfo []byte `protobuf:"bytes,22,opt,name=gpu_info,json=gpuInfo,proto3" json:"gpu_info,omitempty"`
	// 丢包
	PacketLoss int32       `protobuf:"varint,23,opt,name=packet_loss,json=packetLoss,proto3" json:"packet_loss,omitempty"`
	Type       ConnectType `protobuf:"varint,24,opt,name=type,proto3,enum=local_service.ConnectType" json:"type,omitempty"`
	// 受控版本号
	VersionNumber []byte `protobuf:"bytes,25,opt,name=version_number,json=versionNumber,proto3" json:"version_number,omitempty"`
	// 免密连接
	NoPass bool `protobuf:"varint,26,opt,name=no_pass,json=noPass,proto3" json:"no_pass,omitempty"`
	// 设备公网IP地址
	PublicIp []byte `protobuf:"bytes,27,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	// 用户id
	UserId int32 `protobuf:"varint,28,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ConnectPeerResponse) Reset() {
	*x = ConnectPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectPeerResponse) ProtoMessage() {}

func (x *ConnectPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectPeerResponse.ProtoReflect.Descriptor instead.
func (*ConnectPeerResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{11}
}

func (x *ConnectPeerResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ConnectPeerResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *ConnectPeerResponse) GetFreeCapturerPort() int32 {
	if x != nil {
		return x.FreeCapturerPort
	}
	return 0
}

func (x *ConnectPeerResponse) GetProfessionalCapturerPort() int32 {
	if x != nil {
		return x.ProfessionalCapturerPort
	}
	return 0
}

func (x *ConnectPeerResponse) GetLocalProxyPort() int32 {
	if x != nil {
		return x.LocalProxyPort
	}
	return 0
}

func (x *ConnectPeerResponse) GetMachineName() []byte {
	if x != nil {
		return x.MachineName
	}
	return nil
}

func (x *ConnectPeerResponse) GetSdnId() []byte {
	if x != nil {
		return x.SdnId
	}
	return nil
}

func (x *ConnectPeerResponse) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *ConnectPeerResponse) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *ConnectPeerResponse) GetSupportProfessionalConnection() bool {
	if x != nil {
		return x.SupportProfessionalConnection
	}
	return false
}

func (x *ConnectPeerResponse) GetClipboardPort() int32 {
	if x != nil {
		return x.ClipboardPort
	}
	return 0
}

func (x *ConnectPeerResponse) GetLocalFileProxyPort() int32 {
	if x != nil {
		return x.LocalFileProxyPort
	}
	return 0
}

func (x *ConnectPeerResponse) GetSupportIdd() bool {
	if x != nil {
		return x.SupportIdd
	}
	return false
}

func (x *ConnectPeerResponse) GetRayfilePort() int32 {
	if x != nil {
		return x.RayfilePort
	}
	return 0
}

func (x *ConnectPeerResponse) GetPlatform() common.PlatformType {
	if x != nil {
		return x.Platform
	}
	return common.PlatformType_windows
}

func (x *ConnectPeerResponse) GetUploadSpeed() int32 {
	if x != nil {
		return x.UploadSpeed
	}
	return 0
}

func (x *ConnectPeerResponse) GetNotSupportDxgi() bool {
	if x != nil {
		return x.NotSupportDxgi
	}
	return false
}

func (x *ConnectPeerResponse) GetGpuEncode() bool {
	if x != nil && x.GpuEncode != nil {
		return *x.GpuEncode
	}
	return false
}

func (x *ConnectPeerResponse) GetControlledSupportChat() bool {
	if x != nil && x.ControlledSupportChat != nil {
		return *x.ControlledSupportChat
	}
	return false
}

func (x *ConnectPeerResponse) GetScreenIndex() int32 {
	if x != nil && x.ScreenIndex != nil {
		return *x.ScreenIndex
	}
	return 0
}

func (x *ConnectPeerResponse) GetCpuInfo() []byte {
	if x != nil {
		return x.CpuInfo
	}
	return nil
}

func (x *ConnectPeerResponse) GetGpuInfo() []byte {
	if x != nil {
		return x.GpuInfo
	}
	return nil
}

func (x *ConnectPeerResponse) GetPacketLoss() int32 {
	if x != nil {
		return x.PacketLoss
	}
	return 0
}

func (x *ConnectPeerResponse) GetType() ConnectType {
	if x != nil {
		return x.Type
	}
	return ConnectType_control
}

func (x *ConnectPeerResponse) GetVersionNumber() []byte {
	if x != nil {
		return x.VersionNumber
	}
	return nil
}

func (x *ConnectPeerResponse) GetNoPass() bool {
	if x != nil {
		return x.NoPass
	}
	return false
}

func (x *ConnectPeerResponse) GetPublicIp() []byte {
	if x != nil {
		return x.PublicIp
	}
	return nil
}

func (x *ConnectPeerResponse) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ServiceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 连接状态
	ConnectionState ServiceStateConnectionStateT `protobuf:"varint,1,opt,name=connection_state,json=connectionState,proto3,enum=local_service.ServiceStateConnectionStateT" json:"connection_state,omitempty"`
	// 是否支持专业连接
	SupportProfessionalConnection bool `protobuf:"varint,2,opt,name=support_professional_connection,json=supportProfessionalConnection,proto3" json:"support_professional_connection,omitempty"`
}

func (x *ServiceState) Reset() {
	*x = ServiceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceState) ProtoMessage() {}

func (x *ServiceState) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceState.ProtoReflect.Descriptor instead.
func (*ServiceState) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{12}
}

func (x *ServiceState) GetConnectionState() ServiceStateConnectionStateT {
	if x != nil {
		return x.ConnectionState
	}
	return ServiceState_none
}

func (x *ServiceState) GetSupportProfessionalConnection() bool {
	if x != nil {
		return x.SupportProfessionalConnection
	}
	return false
}

type CancelConnectPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 发送 connect_peer 消息时的ID
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *CancelConnectPeer) Reset() {
	*x = CancelConnectPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelConnectPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelConnectPeer) ProtoMessage() {}

func (x *CancelConnectPeer) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelConnectPeer.ProtoReflect.Descriptor instead.
func (*CancelConnectPeer) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{13}
}

func (x *CancelConnectPeer) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 登录账号
type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 服务器地址
	Server []byte `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
	// 服务器端口
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// 账号
	Account []byte `protobuf:"bytes,4,opt,name=account,proto3" json:"account,omitempty"`
	// 密码
	Password []byte `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{14}
}

func (x *Login) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Login) GetServer() []byte {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *Login) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Login) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Login) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

// 登录账号响应
type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 服务器地址
	Server []byte `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	// 服务器端口
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// 账号
	Account []byte `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// 密码
	Password []byte `protobuf:"bytes,6,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{15}
}

func (x *LoginResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *LoginResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *LoginResponse) GetServer() []byte {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *LoginResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *LoginResponse) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *LoginResponse) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

// sdn route连接状态变化
type SdnRouteChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SdnId     []byte                       `protobuf:"bytes,1,opt,name=sdn_id,json=sdnId,proto3" json:"sdn_id,omitempty"`
	RouteType SdnRouteChangedSdnRouteTypeT `protobuf:"varint,2,opt,name=route_type,json=routeType,proto3,enum=local_service.SdnRouteChangedSdnRouteTypeT" json:"route_type,omitempty"`
}

func (x *SdnRouteChanged) Reset() {
	*x = SdnRouteChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdnRouteChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdnRouteChanged) ProtoMessage() {}

func (x *SdnRouteChanged) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdnRouteChanged.ProtoReflect.Descriptor instead.
func (*SdnRouteChanged) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{16}
}

func (x *SdnRouteChanged) GetSdnId() []byte {
	if x != nil {
		return x.SdnId
	}
	return nil
}

func (x *SdnRouteChanged) GetRouteType() SdnRouteChangedSdnRouteTypeT {
	if x != nil {
		return x.RouteType
	}
	return SdnRouteChanged_forward
}

// capturer 连接数发生变化时通知
type ConnectionCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ConnectionCount) Reset() {
	*x = ConnectionCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionCount) ProtoMessage() {}

func (x *ConnectionCount) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionCount.ProtoReflect.Descriptor instead.
func (*ConnectionCount) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{17}
}

func (x *ConnectionCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 对方通过代理连接了本机
type PeerConnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 连接唯一标识
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// 连接数据
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PeerConnected) Reset() {
	*x = PeerConnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerConnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerConnected) ProtoMessage() {}

func (x *PeerConnected) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerConnected.ProtoReflect.Descriptor instead.
func (*PeerConnected) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{18}
}

func (x *PeerConnected) GetHandle() int64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *PeerConnected) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 对方与本机连接断开
type PeerDisconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 连接唯一标识
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *PeerDisconnected) Reset() {
	*x = PeerDisconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerDisconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerDisconnected) ProtoMessage() {}

func (x *PeerDisconnected) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerDisconnected.ProtoReflect.Descriptor instead.
func (*PeerDisconnected) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{19}
}

func (x *PeerDisconnected) GetHandle() int64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

// 设备控制开关
type DeviceControlSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 连接唯一标识
	Handle int64 `protobuf:"varint,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// 主控端设备id
	ProactiveDeviceId []byte `protobuf:"bytes,2,opt,name=proactive_device_id,json=proactiveDeviceId,proto3" json:"proactive_device_id,omitempty"`
	// 被控端设备id
	PassiveDeviceId []byte `protobuf:"bytes,3,opt,name=passive_device_id,json=passiveDeviceId,proto3" json:"passive_device_id,omitempty"`
	Voice           *bool  `protobuf:"varint,4,opt,name=voice,proto3,oneof" json:"voice,omitempty"`
	MouseKeyboard   *bool  `protobuf:"varint,5,opt,name=mouse_keyboard,json=mouseKeyboard,proto3,oneof" json:"mouse_keyboard,omitempty"`
	Clipboard       *bool  `protobuf:"varint,6,opt,name=clipboard,proto3,oneof" json:"clipboard,omitempty"`
	Disconnected    *bool  `protobuf:"varint,7,opt,name=disconnected,proto3,oneof" json:"disconnected,omitempty"`
	PrivacyMode     *bool  `protobuf:"varint,8,opt,name=privacy_mode,json=privacyMode,proto3,oneof" json:"privacy_mode,omitempty"`
	// 主控端 登陆的账号
	ProactiveAccount          []byte `protobuf:"bytes,9,opt,name=proactive_account,json=proactiveAccount,proto3" json:"proactive_account,omitempty"`
	CreateVirtualDisplayCount *int32 `protobuf:"varint,10,opt,name=create_virtual_display_count,json=createVirtualDisplayCount,proto3,oneof" json:"create_virtual_display_count,omitempty"`
	SyncVoice                 *bool  `protobuf:"varint,11,opt,name=sync_voice,json=syncVoice,proto3,oneof" json:"sync_voice,omitempty"`
	// 自适应分辨率
	AdaptiveScreenResolution *bool                           `protobuf:"varint,13,opt,name=adaptive_screen_resolution,json=adaptiveScreenResolution,proto3,oneof" json:"adaptive_screen_resolution,omitempty"`
	ScreenInfo               *DeviceControlSwitchScreenInfoT `protobuf:"bytes,14,opt,name=screen_info,json=screenInfo,proto3,oneof" json:"screen_info,omitempty"`
	HideBackground           *bool                           `protobuf:"varint,15,opt,name=hide_background,json=hideBackground,proto3,oneof" json:"hide_background,omitempty"`
}

func (x *DeviceControlSwitch) Reset() {
	*x = DeviceControlSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceControlSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceControlSwitch) ProtoMessage() {}

func (x *DeviceControlSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceControlSwitch.ProtoReflect.Descriptor instead.
func (*DeviceControlSwitch) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{20}
}

func (x *DeviceControlSwitch) GetHandle() int64 {
	if x != nil {
		return x.Handle
	}
	return 0
}

func (x *DeviceControlSwitch) GetProactiveDeviceId() []byte {
	if x != nil {
		return x.ProactiveDeviceId
	}
	return nil
}

func (x *DeviceControlSwitch) GetPassiveDeviceId() []byte {
	if x != nil {
		return x.PassiveDeviceId
	}
	return nil
}

func (x *DeviceControlSwitch) GetVoice() bool {
	if x != nil && x.Voice != nil {
		return *x.Voice
	}
	return false
}

func (x *DeviceControlSwitch) GetMouseKeyboard() bool {
	if x != nil && x.MouseKeyboard != nil {
		return *x.MouseKeyboard
	}
	return false
}

func (x *DeviceControlSwitch) GetClipboard() bool {
	if x != nil && x.Clipboard != nil {
		return *x.Clipboard
	}
	return false
}

func (x *DeviceControlSwitch) GetDisconnected() bool {
	if x != nil && x.Disconnected != nil {
		return *x.Disconnected
	}
	return false
}

func (x *DeviceControlSwitch) GetPrivacyMode() bool {
	if x != nil && x.PrivacyMode != nil {
		return *x.PrivacyMode
	}
	return false
}

func (x *DeviceControlSwitch) GetProactiveAccount() []byte {
	if x != nil {
		return x.ProactiveAccount
	}
	return nil
}

func (x *DeviceControlSwitch) GetCreateVirtualDisplayCount() int32 {
	if x != nil && x.CreateVirtualDisplayCount != nil {
		return *x.CreateVirtualDisplayCount
	}
	return 0
}

func (x *DeviceControlSwitch) GetSyncVoice() bool {
	if x != nil && x.SyncVoice != nil {
		return *x.SyncVoice
	}
	return false
}

func (x *DeviceControlSwitch) GetAdaptiveScreenResolution() bool {
	if x != nil && x.AdaptiveScreenResolution != nil {
		return *x.AdaptiveScreenResolution
	}
	return false
}

func (x *DeviceControlSwitch) GetScreenInfo() *DeviceControlSwitchScreenInfoT {
	if x != nil {
		return x.ScreenInfo
	}
	return nil
}

func (x *DeviceControlSwitch) GetHideBackground() bool {
	if x != nil && x.HideBackground != nil {
		return *x.HideBackground
	}
	return false
}

type DeviceControlSwitchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主控端设备id
	ProactiveDeviceId []byte `protobuf:"bytes,1,opt,name=proactive_device_id,json=proactiveDeviceId,proto3" json:"proactive_device_id,omitempty"`
	// 被控端设备id
	PassiveDeviceId []byte `protobuf:"bytes,2,opt,name=passive_device_id,json=passiveDeviceId,proto3" json:"passive_device_id,omitempty"`
	// 是否运行启用隐私模式
	AccpetPrivacyMode *bool `protobuf:"varint,3,opt,name=accpet_privacy_mode,json=accpetPrivacyMode,proto3,oneof" json:"accpet_privacy_mode,omitempty"`
	// 创建虚拟屏响应  <0拒绝，=0关闭，>0创建成功的虚拟屏数量
	CreateVirtualDisplayResult *int32 `protobuf:"varint,4,opt,name=create_virtual_display_result,json=createVirtualDisplayResult,proto3,oneof" json:"create_virtual_display_result,omitempty"`
}

func (x *DeviceControlSwitchResponse) Reset() {
	*x = DeviceControlSwitchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceControlSwitchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceControlSwitchResponse) ProtoMessage() {}

func (x *DeviceControlSwitchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceControlSwitchResponse.ProtoReflect.Descriptor instead.
func (*DeviceControlSwitchResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{21}
}

func (x *DeviceControlSwitchResponse) GetProactiveDeviceId() []byte {
	if x != nil {
		return x.ProactiveDeviceId
	}
	return nil
}

func (x *DeviceControlSwitchResponse) GetPassiveDeviceId() []byte {
	if x != nil {
		return x.PassiveDeviceId
	}
	return nil
}

func (x *DeviceControlSwitchResponse) GetAccpetPrivacyMode() bool {
	if x != nil && x.AccpetPrivacyMode != nil {
		return *x.AccpetPrivacyMode
	}
	return false
}

func (x *DeviceControlSwitchResponse) GetCreateVirtualDisplayResult() int32 {
	if x != nil && x.CreateVirtualDisplayResult != nil {
		return *x.CreateVirtualDisplayResult
	}
	return 0
}

// 软件升级
type UpgradeSoftware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否强制升级
	Force bool `protobuf:"varint,1,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *UpgradeSoftware) Reset() {
	*x = UpgradeSoftware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeSoftware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeSoftware) ProtoMessage() {}

func (x *UpgradeSoftware) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeSoftware.ProtoReflect.Descriptor instead.
func (*UpgradeSoftware) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{22}
}

func (x *UpgradeSoftware) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

// 注册剪切板端口
type RegisterClipboardPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RegisterClipboardPort) Reset() {
	*x = RegisterClipboardPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterClipboardPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClipboardPort) ProtoMessage() {}

func (x *RegisterClipboardPort) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClipboardPort.ProtoReflect.Descriptor instead.
func (*RegisterClipboardPort) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{23}
}

func (x *RegisterClipboardPort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// 注册剪切板端口响应
type RegisterClipboardPortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterClipboardPortResponse) Reset() {
	*x = RegisterClipboardPortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterClipboardPortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClipboardPortResponse) ProtoMessage() {}

func (x *RegisterClipboardPortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClipboardPortResponse.ProtoReflect.Descriptor instead.
func (*RegisterClipboardPortResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{24}
}

// 同步多连接客户端状态
type SynchronizeClientState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 被控端设备id
	PassiveDeviceId []byte `protobuf:"bytes,1,opt,name=passive_device_id,json=passiveDeviceId,proto3" json:"passive_device_id,omitempty"`
	// 隐私模式
	PrivacyMode                *bool  `protobuf:"varint,2,opt,name=privacy_mode,json=privacyMode,proto3,oneof" json:"privacy_mode,omitempty"`
	CurrentVirtualDisplayCount *int32 `protobuf:"varint,4,opt,name=current_virtual_display_count,json=currentVirtualDisplayCount,proto3,oneof" json:"current_virtual_display_count,omitempty"`
}

func (x *SynchronizeClientState) Reset() {
	*x = SynchronizeClientState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynchronizeClientState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynchronizeClientState) ProtoMessage() {}

func (x *SynchronizeClientState) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynchronizeClientState.ProtoReflect.Descriptor instead.
func (*SynchronizeClientState) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{25}
}

func (x *SynchronizeClientState) GetPassiveDeviceId() []byte {
	if x != nil {
		return x.PassiveDeviceId
	}
	return nil
}

func (x *SynchronizeClientState) GetPrivacyMode() bool {
	if x != nil && x.PrivacyMode != nil {
		return *x.PrivacyMode
	}
	return false
}

func (x *SynchronizeClientState) GetCurrentVirtualDisplayCount() int32 {
	if x != nil && x.CurrentVirtualDisplayCount != nil {
		return *x.CurrentVirtualDisplayCount
	}
	return 0
}

// 注册文件服务端口
type RegisterRayfilePort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port int32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *RegisterRayfilePort) Reset() {
	*x = RegisterRayfilePort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRayfilePort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRayfilePort) ProtoMessage() {}

func (x *RegisterRayfilePort) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRayfilePort.ProtoReflect.Descriptor instead.
func (*RegisterRayfilePort) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{26}
}

func (x *RegisterRayfilePort) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// 注册文件服务端口响应
type RegisterRayfilePortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterRayfilePortResponse) Reset() {
	*x = RegisterRayfilePortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRayfilePortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRayfilePortResponse) ProtoMessage() {}

func (x *RegisterRayfilePortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRayfilePortResponse.ProtoReflect.Descriptor instead.
func (*RegisterRayfilePortResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{27}
}

type FunctionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 被控端设备id
	PassiveDeviceId []byte `protobuf:"bytes,1,opt,name=passive_device_id,json=passiveDeviceId,proto3" json:"passive_device_id,omitempty"`
	// 虚拟屏
	VirtualScreen *bool `protobuf:"varint,2,opt,name=virtual_screen,json=virtualScreen,proto3,oneof" json:"virtual_screen,omitempty"`
	// 语音同步
	AudioSync *bool `protobuf:"varint,3,opt,name=audio_sync,json=audioSync,proto3,oneof" json:"audio_sync,omitempty"`
}

func (x *FunctionList) Reset() {
	*x = FunctionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionList) ProtoMessage() {}

func (x *FunctionList) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionList.ProtoReflect.Descriptor instead.
func (*FunctionList) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{28}
}

func (x *FunctionList) GetPassiveDeviceId() []byte {
	if x != nil {
		return x.PassiveDeviceId
	}
	return nil
}

func (x *FunctionList) GetVirtualScreen() bool {
	if x != nil && x.VirtualScreen != nil {
		return *x.VirtualScreen
	}
	return false
}

func (x *FunctionList) GetAudioSync() bool {
	if x != nil && x.AudioSync != nil {
		return *x.AudioSync
	}
	return false
}

type SetProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 代理类型
	ProxyType SetProxyProxyTypeT `protobuf:"varint,1,opt,name=proxy_type,json=proxyType,proto3,enum=local_service.SetProxyProxyTypeT" json:"proxy_type,omitempty"`
	// 代理服务器地址
	ProxyHost []byte `protobuf:"bytes,2,opt,name=proxy_host,json=proxyHost,proto3" json:"proxy_host,omitempty"`
	// 代理服务器端口
	ProxyPort int32 `protobuf:"varint,3,opt,name=proxy_port,json=proxyPort,proto3" json:"proxy_port,omitempty"`
	// 代理服务器用户名
	Username []byte `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	// 代理服务器密码
	Password []byte `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SetProxy) Reset() {
	*x = SetProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProxy) ProtoMessage() {}

func (x *SetProxy) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProxy.ProtoReflect.Descriptor instead.
func (*SetProxy) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{29}
}

func (x *SetProxy) GetProxyType() SetProxyProxyTypeT {
	if x != nil {
		return x.ProxyType
	}
	return SetProxy_none
}

func (x *SetProxy) GetProxyHost() []byte {
	if x != nil {
		return x.ProxyHost
	}
	return nil
}

func (x *SetProxy) GetProxyPort() int32 {
	if x != nil {
		return x.ProxyPort
	}
	return 0
}

func (x *SetProxy) GetUsername() []byte {
	if x != nil {
		return x.Username
	}
	return nil
}

func (x *SetProxy) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

// 发送全屏消息到受控 UI[主]->Service[主]->Service[受]->ui[受]
type SendFullScreenToPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 主控端设备id
	MasterDeviceId []byte `protobuf:"bytes,2,opt,name=master_device_id,json=masterDeviceId,proto3" json:"master_device_id,omitempty"`
	// 受控端设备id
	ControlledDeviceId []byte `protobuf:"bytes,3,opt,name=controlled_device_id,json=controlledDeviceId,proto3" json:"controlled_device_id,omitempty"`
	// true:全屏； false：窗口化
	FullScreen *bool `protobuf:"varint,4,opt,name=full_screen,json=fullScreen,proto3,oneof" json:"full_screen,omitempty"`
	// 主控端账号
	MasterAccount []byte `protobuf:"bytes,5,opt,name=master_account,json=masterAccount,proto3" json:"master_account,omitempty"`
}

func (x *SendFullScreenToPeer) Reset() {
	*x = SendFullScreenToPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFullScreenToPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFullScreenToPeer) ProtoMessage() {}

func (x *SendFullScreenToPeer) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFullScreenToPeer.ProtoReflect.Descriptor instead.
func (*SendFullScreenToPeer) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{30}
}

func (x *SendFullScreenToPeer) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SendFullScreenToPeer) GetMasterDeviceId() []byte {
	if x != nil {
		return x.MasterDeviceId
	}
	return nil
}

func (x *SendFullScreenToPeer) GetControlledDeviceId() []byte {
	if x != nil {
		return x.ControlledDeviceId
	}
	return nil
}

func (x *SendFullScreenToPeer) GetFullScreen() bool {
	if x != nil && x.FullScreen != nil {
		return *x.FullScreen
	}
	return false
}

func (x *SendFullScreenToPeer) GetMasterAccount() []byte {
	if x != nil {
		return x.MasterAccount
	}
	return nil
}

// 发送全屏消息到受控的响应 UI[主]<-Service[主]<-Service[受]<-UI[受]
type SendFullScreenToPeerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 主控端设备id
	MasterDeviceId []byte `protobuf:"bytes,3,opt,name=master_device_id,json=masterDeviceId,proto3" json:"master_device_id,omitempty"`
	// 受控端设备id
	ControlledDeviceId []byte `protobuf:"bytes,4,opt,name=controlled_device_id,json=controlledDeviceId,proto3" json:"controlled_device_id,omitempty"`
}

func (x *SendFullScreenToPeerResponse) Reset() {
	*x = SendFullScreenToPeerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendFullScreenToPeerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendFullScreenToPeerResponse) ProtoMessage() {}

func (x *SendFullScreenToPeerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendFullScreenToPeerResponse.ProtoReflect.Descriptor instead.
func (*SendFullScreenToPeerResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{31}
}

func (x *SendFullScreenToPeerResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SendFullScreenToPeerResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *SendFullScreenToPeerResponse) GetMasterDeviceId() []byte {
	if x != nil {
		return x.MasterDeviceId
	}
	return nil
}

func (x *SendFullScreenToPeerResponse) GetControlledDeviceId() []byte {
	if x != nil {
		return x.ControlledDeviceId
	}
	return nil
}

type RegisterWebrtcToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// token
	Token []byte `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *RegisterWebrtcToken) Reset() {
	*x = RegisterWebrtcToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWebrtcToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWebrtcToken) ProtoMessage() {}

func (x *RegisterWebrtcToken) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWebrtcToken.ProtoReflect.Descriptor instead.
func (*RegisterWebrtcToken) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{32}
}

func (x *RegisterWebrtcToken) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *RegisterWebrtcToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

type RegisterWebrtcTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *RegisterWebrtcTokenResponse) Reset() {
	*x = RegisterWebrtcTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWebrtcTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWebrtcTokenResponse) ProtoMessage() {}

func (x *RegisterWebrtcTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWebrtcTokenResponse.ProtoReflect.Descriptor instead.
func (*RegisterWebrtcTokenResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{33}
}

func (x *RegisterWebrtcTokenResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *RegisterWebrtcTokenResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 文件传输限速 [UI] -> [Service]
type LimitFileTransferSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 受控端sdn
	SdnId []byte `protobuf:"bytes,2,opt,name=sdn_id,json=sdnId,proto3" json:"sdn_id,omitempty"`
	// 传输速度(KBps)
	TransferSpeed int32 `protobuf:"varint,3,opt,name=transfer_speed,json=transferSpeed,proto3" json:"transfer_speed,omitempty"`
}

func (x *LimitFileTransferSpeed) Reset() {
	*x = LimitFileTransferSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitFileTransferSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitFileTransferSpeed) ProtoMessage() {}

func (x *LimitFileTransferSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitFileTransferSpeed.ProtoReflect.Descriptor instead.
func (*LimitFileTransferSpeed) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{34}
}

func (x *LimitFileTransferSpeed) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *LimitFileTransferSpeed) GetSdnId() []byte {
	if x != nil {
		return x.SdnId
	}
	return nil
}

func (x *LimitFileTransferSpeed) GetTransferSpeed() int32 {
	if x != nil {
		return x.TransferSpeed
	}
	return 0
}

// 文件传输限速响应 [UI] <- [Service]
type LimitFileTransferSpeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *LimitFileTransferSpeedResponse) Reset() {
	*x = LimitFileTransferSpeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitFileTransferSpeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitFileTransferSpeedResponse) ProtoMessage() {}

func (x *LimitFileTransferSpeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitFileTransferSpeedResponse.ProtoReflect.Descriptor instead.
func (*LimitFileTransferSpeedResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{35}
}

func (x *LimitFileTransferSpeedResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *LimitFileTransferSpeedResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

type SendChatMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 发送端设备id
	MasterDeviceId []byte `protobuf:"bytes,2,opt,name=master_device_id,json=masterDeviceId,proto3" json:"master_device_id,omitempty"`
	// 接收端设备id
	ControlledDeviceId []byte `protobuf:"bytes,3,opt,name=controlled_device_id,json=controlledDeviceId,proto3" json:"controlled_device_id,omitempty"`
	// 消息内容
	ChatMessage []byte `protobuf:"bytes,4,opt,name=chat_message,json=chatMessage,proto3" json:"chat_message,omitempty"`
	// 发送端账号
	AccountOfSender []byte `protobuf:"bytes,5,opt,name=account_of_sender,json=accountOfSender,proto3" json:"account_of_sender,omitempty"`
}

func (x *SendChatMessage) Reset() {
	*x = SendChatMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessage) ProtoMessage() {}

func (x *SendChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessage.ProtoReflect.Descriptor instead.
func (*SendChatMessage) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{36}
}

func (x *SendChatMessage) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SendChatMessage) GetMasterDeviceId() []byte {
	if x != nil {
		return x.MasterDeviceId
	}
	return nil
}

func (x *SendChatMessage) GetControlledDeviceId() []byte {
	if x != nil {
		return x.ControlledDeviceId
	}
	return nil
}

func (x *SendChatMessage) GetChatMessage() []byte {
	if x != nil {
		return x.ChatMessage
	}
	return nil
}

func (x *SendChatMessage) GetAccountOfSender() []byte {
	if x != nil {
		return x.AccountOfSender
	}
	return nil
}

type SendChatMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 发送端设备id(聊天非响应消息的发送端)
	SenderId []byte `protobuf:"bytes,3,opt,name=sender_id,json=senderId,proto3" json:"sender_id,omitempty"`
	// 接收端设备id(聊天非响应消息的接收端)
	ReceiverId []byte `protobuf:"bytes,4,opt,name=receiver_id,json=receiverId,proto3" json:"receiver_id,omitempty"`
}

func (x *SendChatMessageResponse) Reset() {
	*x = SendChatMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendChatMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendChatMessageResponse) ProtoMessage() {}

func (x *SendChatMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendChatMessageResponse.ProtoReflect.Descriptor instead.
func (*SendChatMessageResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{37}
}

func (x *SendChatMessageResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SendChatMessageResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *SendChatMessageResponse) GetSenderId() []byte {
	if x != nil {
		return x.SenderId
	}
	return nil
}

func (x *SendChatMessageResponse) GetReceiverId() []byte {
	if x != nil {
		return x.ReceiverId
	}
	return nil
}

type MirrorOrExtendScreen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 主控端设备id
	MasterDeviceId []byte `protobuf:"bytes,2,opt,name=master_device_id,json=masterDeviceId,proto3" json:"master_device_id,omitempty"`
	// 受控端设备id
	ControlledDeviceId []byte `protobuf:"bytes,3,opt,name=controlled_device_id,json=controlledDeviceId,proto3" json:"controlled_device_id,omitempty"`
	AuthKey            []byte `protobuf:"bytes,5,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// 1:镜像/2:扩展
	MirrorOrExtend int32 `protobuf:"varint,6,opt,name=mirror_or_extend,json=mirrorOrExtend,proto3" json:"mirror_or_extend,omitempty"`
}

func (x *MirrorOrExtendScreen) Reset() {
	*x = MirrorOrExtendScreen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorOrExtendScreen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorOrExtendScreen) ProtoMessage() {}

func (x *MirrorOrExtendScreen) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorOrExtendScreen.ProtoReflect.Descriptor instead.
func (*MirrorOrExtendScreen) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{38}
}

func (x *MirrorOrExtendScreen) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MirrorOrExtendScreen) GetMasterDeviceId() []byte {
	if x != nil {
		return x.MasterDeviceId
	}
	return nil
}

func (x *MirrorOrExtendScreen) GetControlledDeviceId() []byte {
	if x != nil {
		return x.ControlledDeviceId
	}
	return nil
}

func (x *MirrorOrExtendScreen) GetAuthKey() []byte {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *MirrorOrExtendScreen) GetMirrorOrExtend() int32 {
	if x != nil {
		return x.MirrorOrExtend
	}
	return 0
}

type MirrorOrExtendScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 主控端设备id
	MasterDeviceId []byte `protobuf:"bytes,2,opt,name=master_device_id,json=masterDeviceId,proto3" json:"master_device_id,omitempty"`
	// 受控端设备id
	ControlledDeviceId []byte           `protobuf:"bytes,3,opt,name=controlled_device_id,json=controlledDeviceId,proto3" json:"controlled_device_id,omitempty"`
	Error              common.ErrorCode `protobuf:"varint,4,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *MirrorOrExtendScreenResponse) Reset() {
	*x = MirrorOrExtendScreenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MirrorOrExtendScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MirrorOrExtendScreenResponse) ProtoMessage() {}

func (x *MirrorOrExtendScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MirrorOrExtendScreenResponse.ProtoReflect.Descriptor instead.
func (*MirrorOrExtendScreenResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{39}
}

func (x *MirrorOrExtendScreenResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *MirrorOrExtendScreenResponse) GetMasterDeviceId() []byte {
	if x != nil {
		return x.MasterDeviceId
	}
	return nil
}

func (x *MirrorOrExtendScreenResponse) GetControlledDeviceId() []byte {
	if x != nil {
		return x.ControlledDeviceId
	}
	return nil
}

func (x *MirrorOrExtendScreenResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 通知受控上传日志文件 UI[主]->Service[主]->Service[受]->UI[受]
type ReportLogFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 主控端设备id
	MasterDeviceId []byte `protobuf:"bytes,2,opt,name=master_device_id,json=masterDeviceId,proto3" json:"master_device_id,omitempty"`
	// 受控端设备id
	ControlledDeviceId []byte `protobuf:"bytes,3,opt,name=controlled_device_id,json=controlledDeviceId,proto3" json:"controlled_device_id,omitempty"`
	// 远程连接id
	ConnectionId int64 `protobuf:"varint,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *ReportLogFile) Reset() {
	*x = ReportLogFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportLogFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportLogFile) ProtoMessage() {}

func (x *ReportLogFile) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportLogFile.ProtoReflect.Descriptor instead.
func (*ReportLogFile) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{40}
}

func (x *ReportLogFile) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReportLogFile) GetMasterDeviceId() []byte {
	if x != nil {
		return x.MasterDeviceId
	}
	return nil
}

func (x *ReportLogFile) GetControlledDeviceId() []byte {
	if x != nil {
		return x.ControlledDeviceId
	}
	return nil
}

func (x *ReportLogFile) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

type ReportLogFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主控端设备id
	MasterDeviceId []byte `protobuf:"bytes,1,opt,name=master_device_id,json=masterDeviceId,proto3" json:"master_device_id,omitempty"`
	// 受控端设备id
	ControlledDeviceId []byte `protobuf:"bytes,2,opt,name=controlled_device_id,json=controlledDeviceId,proto3" json:"controlled_device_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,3,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *ReportLogFileResponse) Reset() {
	*x = ReportLogFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportLogFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportLogFileResponse) ProtoMessage() {}

func (x *ReportLogFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportLogFileResponse.ProtoReflect.Descriptor instead.
func (*ReportLogFileResponse) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{41}
}

func (x *ReportLogFileResponse) GetMasterDeviceId() []byte {
	if x != nil {
		return x.MasterDeviceId
	}
	return nil
}

func (x *ReportLogFileResponse) GetControlledDeviceId() []byte {
	if x != nil {
		return x.ControlledDeviceId
	}
	return nil
}

func (x *ReportLogFileResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 执行可执行程序
type ExecuteProgram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []byte   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Args [][]byte `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *ExecuteProgram) Reset() {
	*x = ExecuteProgram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteProgram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteProgram) ProtoMessage() {}

func (x *ExecuteProgram) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteProgram.ProtoReflect.Descriptor instead.
func (*ExecuteProgram) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{42}
}

func (x *ExecuteProgram) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ExecuteProgram) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type DeviceControlSwitchScreenInfoT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index  int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Width  int32 `protobuf:"varint,2,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"` // scaling_t scale = 4;
}

func (x *DeviceControlSwitchScreenInfoT) Reset() {
	*x = DeviceControlSwitchScreenInfoT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_local_service_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceControlSwitchScreenInfoT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceControlSwitchScreenInfoT) ProtoMessage() {}

func (x *DeviceControlSwitchScreenInfoT) ProtoReflect() protoreflect.Message {
	mi := &file_local_service_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceControlSwitchScreenInfoT.ProtoReflect.Descriptor instead.
func (*DeviceControlSwitchScreenInfoT) Descriptor() ([]byte, []int) {
	return file_local_service_proto_rawDescGZIP(), []int{20, 0}
}

func (x *DeviceControlSwitchScreenInfoT) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DeviceControlSwitchScreenInfoT) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *DeviceControlSwitchScreenInfoT) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

var File_local_service_proto protoreflect.FileDescriptor

var file_local_service_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x26, 0x0a, 0x05, 0x68, 0x65, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x04, 0x65, 0x78,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x22, 0x57, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x0e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22,
	0x32, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x10, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x20, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x02, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6f,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x12, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x72, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xb1, 0x09, 0x0a, 0x15, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x22, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x48, 0x01, 0x52, 0x0d, 0x6b, 0x65, 0x79, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x14, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x11, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0e, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0c, 0x62, 0x6f, 0x6f,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x0f,
	0x6b, 0x65, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x65, 0x79, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x48, 0x05, 0x52,
	0x0d, 0x6b, 0x65, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x06, 0x52, 0x0e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07,
	0x52, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x78, 0x5f,
	0x66, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x14, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x46, 0x69, 0x78, 0x46, 0x70,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x1a, 0x6e,
	0x65, 0x65, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x44, 0x69, 0x66, 0x66, 0x69, 0x72, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16,
	0x6e, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x13,
	0x6e, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x15, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x12, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4f,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x0c, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x22, 0x3f, 0x0a, 0x11,
	0x6b, 0x65, 0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x72, 0x79, 0x64, 0x61, 0x79, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x10, 0x02, 0x22, 0x38, 0x0a,
	0x11, 0x6b, 0x65, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x10, 0x02, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x62, 0x6f, 0x6f,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x6b, 0x65, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x5f, 0x66, 0x69, 0x78, 0x5f, 0x66, 0x70, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x6e, 0x65,
	0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x6e, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x63, 0x0a, 0x1f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb7, 0x04, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x50, 0x61, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x22,
	0x86, 0x09, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x72, 0x65, 0x65, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3c, 0x0a, 0x1a, 0x70, 0x72, 0x6f,
	0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x70,
	0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x64, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x1f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x61, 0x79,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x61, 0x79, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e,
	0x6f, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x78, 0x67, 0x69, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x78, 0x67, 0x69, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x70, 0x75, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x67, 0x70, 0x75,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x15, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0b,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x70, 0x75,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x67, 0x70, 0x75,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x6e, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x69, 0x70, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x70, 0x75, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf4, 0x01, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x1f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x02, 0x22,
	0x34, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x73, 0x64, 0x6e, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73,
	0x64, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73, 0x64, 0x6e, 0x5f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x2e, 0x73, 0x64, 0x6e, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x52, 0x09, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x34, 0x0a, 0x10, 0x73, 0x64, 0x6e, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x10, 0x02, 0x22, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3c, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x11, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x22, 0xbd, 0x07, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f,
	0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x05, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x6d, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72,
	0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52,
	0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x06, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x41, 0x0a, 0x1a, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x18, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x2e,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x48, 0x08, 0x52,
	0x0a, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0e, 0x68, 0x69, 0x64, 0x65, 0x42,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x53, 0x0a, 0x0d,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x1f,
	0x0a, 0x1d, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0xb3, 0x02, 0x0a, 0x1e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0f, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x70, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x11, 0x61, 0x63, 0x63, 0x70, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x1a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x61, 0x63, 0x63, 0x70, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28, 0x0a, 0x10, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x22, 0x2d, 0x0a, 0x17, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c,
	0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x22, 0x0a, 0x20, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69,
	0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe9, 0x01, 0x0a, 0x18, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x1a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x42, 0x20,
	0x0a, 0x1e, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x2b, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x79,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x20, 0x0a,
	0x1e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x79, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xad, 0x01, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x61,
	0x73, 0x73, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x53, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x22,
	0xf7, 0x01, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x44, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x2e, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x10, 0x02, 0x22, 0xf2, 0x01, 0x0a, 0x18, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74,
	0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x22, 0xc1,
	0x01, 0x0a, 0x21, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77,
	0x65, 0x62, 0x72, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x62, 0x0a, 0x1e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62,
	0x72, 0x74, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x78, 0x0a, 0x19, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x73, 0x64, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x66,
	0x0a, 0x22, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xdd, 0x01, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66,
	0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x1a, 0x73, 0x65, 0x6e, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd9, 0x01, 0x0a, 0x17, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x4f, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x22, 0xc0, 0x01, 0x0a, 0x20, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x2a,
	0x8b, 0x0a, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x6d, 0x73, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x04, 0x12,
	0x22, 0x0a, 0x1e, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x75, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x06, 0x12, 0x1d, 0x0a,
	0x19, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a,
	0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x08, 0x12, 0x27, 0x0a, 0x23,
	0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x6d,
	0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x73,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x0c, 0x12, 0x1b, 0x0a, 0x17, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x0d,
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x0e, 0x12, 0x16, 0x0a,
	0x12, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x64, 0x6e,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x10,
	0x12, 0x18, 0x0a, 0x14, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x11, 0x12, 0x16, 0x0a, 0x12, 0x6d, 0x73,
	0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x13, 0x12, 0x1d, 0x0a,
	0x19, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14,
	0x6d, 0x73, 0x67, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74,
	0x77, 0x61, 0x72, 0x65, 0x10, 0x15, 0x12, 0x1f, 0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x16, 0x12, 0x28, 0x0a, 0x24, 0x6d, 0x73, 0x67, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10,
	0x17, 0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f,
	0x6e, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x18, 0x12, 0x26, 0x0a, 0x22, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x19, 0x12, 0x1d, 0x0a, 0x19, 0x6d,
	0x73, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x79, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x1a, 0x12, 0x26, 0x0a, 0x22, 0x6d, 0x73,
	0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x79, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x1c, 0x12, 0x11, 0x0a, 0x0d, 0x6d, 0x73, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x10, 0x1d, 0x12, 0x20, 0x0a, 0x1c,
	0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x10, 0x1e, 0x12, 0x29,
	0x0a, 0x25, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x6d, 0x73, 0x67,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x20, 0x12, 0x26, 0x0a, 0x22, 0x6d, 0x73, 0x67, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x65, 0x62, 0x72, 0x74, 0x63, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x21,
	0x12, 0x21, 0x0a, 0x1d, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x10, 0x22, 0x12, 0x2a, 0x0a, 0x26, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x23, 0x12,
	0x19, 0x0a, 0x15, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x24, 0x12, 0x22, 0x0a, 0x1e, 0x6d, 0x73,
	0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x25, 0x12, 0x1f,
	0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x26, 0x12,
	0x28, 0x0a, 0x24, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6f, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x27, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x73, 0x67,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x10, 0x28, 0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x29, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x10, 0x2a, 0x2a, 0x3d, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x69, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x10, 0x03, 0x42, 0x10, 0x5a, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_local_service_proto_rawDescOnce sync.Once
	file_local_service_proto_rawDescData = file_local_service_proto_rawDesc
)

func file_local_service_proto_rawDescGZIP() []byte {
	file_local_service_proto_rawDescOnce.Do(func() {
		file_local_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_local_service_proto_rawDescData)
	})
	return file_local_service_proto_rawDescData
}

var file_local_service_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_local_service_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_local_service_proto_goTypes = []interface{}{
	(MessageType)(0),                       // 0: local_service.message_type
	(ConnectType)(0),                       // 1: local_service.connect_type
	(UpdateServiceConfigKeyUpdateModeT)(0), // 2: local_service.update_service_config.key_update_mode_t
	(UpdateServiceConfigKeyAccessModeT)(0), // 3: local_service.update_service_config.key_access_mode_t
	(ServiceStateConnectionStateT)(0),      // 4: local_service.service_state.connection_state_t
	(SdnRouteChangedSdnRouteTypeT)(0),      // 5: local_service.sdn_route_changed.sdn_route_type_t
	(SetProxyProxyTypeT)(0),                // 6: local_service.set_proxy.proxy_type_t
	(*Heart)(nil),                          // 7: local_service.heart
	(*Exit)(nil),                           // 8: local_service.exit
	(*Check)(nil),                          // 9: local_service.check
	(*CheckResponse)(nil),                  // 10: local_service.check_response
	(*GetLoginAccount)(nil),                // 11: local_service.get_login_account
	(*GetLoginAccountResponse)(nil),        // 12: local_service.get_login_account_response
	(*UpdateUiConfig)(nil),                 // 13: local_service.update_ui_config
	(*UpdateServiceConfig)(nil),            // 14: local_service.update_service_config
	(*RegisterCapturerPort)(nil),           // 15: local_service.register_capturer_port
	(*RegisterCapturerPortResponse)(nil),   // 16: local_service.register_capturer_port_response
	(*ConnectPeer)(nil),                    // 17: local_service.connect_peer
	(*ConnectPeerResponse)(nil),            // 18: local_service.connect_peer_response
	(*ServiceState)(nil),                   // 19: local_service.service_state
	(*CancelConnectPeer)(nil),              // 20: local_service.cancel_connect_peer
	(*Login)(nil),                          // 21: local_service.login
	(*LoginResponse)(nil),                  // 22: local_service.login_response
	(*SdnRouteChanged)(nil),                // 23: local_service.sdn_route_changed
	(*ConnectionCount)(nil),                // 24: local_service.connection_count
	(*PeerConnected)(nil),                  // 25: local_service.peer_connected
	(*PeerDisconnected)(nil),               // 26: local_service.peer_disconnected
	(*DeviceControlSwitch)(nil),            // 27: local_service.device_control_switch
	(*DeviceControlSwitchResponse)(nil),    // 28: local_service.device_control_switch_response
	(*UpgradeSoftware)(nil),                // 29: local_service.upgrade_software
	(*RegisterClipboardPort)(nil),          // 30: local_service.register_clipboard_port
	(*RegisterClipboardPortResponse)(nil),  // 31: local_service.register_clipboard_port_response
	(*SynchronizeClientState)(nil),         // 32: local_service.synchronize_client_state
	(*RegisterRayfilePort)(nil),            // 33: local_service.register_rayfile_port
	(*RegisterRayfilePortResponse)(nil),    // 34: local_service.register_rayfile_port_response
	(*FunctionList)(nil),                   // 35: local_service.function_list
	(*SetProxy)(nil),                       // 36: local_service.set_proxy
	(*SendFullScreenToPeer)(nil),           // 37: local_service.send_full_screen_to_peer
	(*SendFullScreenToPeerResponse)(nil),   // 38: local_service.send_full_screen_to_peer_response
	(*RegisterWebrtcToken)(nil),            // 39: local_service.register_webrtc_token
	(*RegisterWebrtcTokenResponse)(nil),    // 40: local_service.register_webrtc_token_response
	(*LimitFileTransferSpeed)(nil),         // 41: local_service.limit_file_transfer_speed
	(*LimitFileTransferSpeedResponse)(nil), // 42: local_service.limit_file_transfer_speed_response
	(*SendChatMessage)(nil),                // 43: local_service.send_chat_message
	(*SendChatMessageResponse)(nil),        // 44: local_service.send_chat_message_response
	(*MirrorOrExtendScreen)(nil),           // 45: local_service.mirror_or_extend_screen
	(*MirrorOrExtendScreenResponse)(nil),   // 46: local_service.mirror_or_extend_screen_response
	(*ReportLogFile)(nil),                  // 47: local_service.report_log_file
	(*ReportLogFileResponse)(nil),          // 48: local_service.report_log_file_response
	(*ExecuteProgram)(nil),                 // 49: local_service.execute_program
	(*DeviceControlSwitchScreenInfoT)(nil), // 50: local_service.device_control_switch.screen_info_t
	(common.ErrorCode)(0),                  // 51: error_code
	(common.PlatformType)(0),               // 52: platform_type
}
var file_local_service_proto_depIdxs = []int32{
	2,  // 0: local_service.update_service_config.key_update_mode:type_name -> local_service.update_service_config.key_update_mode_t
	3,  // 1: local_service.update_service_config.key_access_mode:type_name -> local_service.update_service_config.key_access_mode_t
	51, // 2: local_service.register_capturer_port_response.error:type_name -> error_code
	52, // 3: local_service.connect_peer.master_platform:type_name -> platform_type
	1,  // 4: local_service.connect_peer.type:type_name -> local_service.connect_type
	51, // 5: local_service.connect_peer_response.error:type_name -> error_code
	52, // 6: local_service.connect_peer_response.platform:type_name -> platform_type
	1,  // 7: local_service.connect_peer_response.type:type_name -> local_service.connect_type
	4,  // 8: local_service.service_state.connection_state:type_name -> local_service.service_state.connection_state_t
	51, // 9: local_service.login_response.error:type_name -> error_code
	5,  // 10: local_service.sdn_route_changed.route_type:type_name -> local_service.sdn_route_changed.sdn_route_type_t
	50, // 11: local_service.device_control_switch.screen_info:type_name -> local_service.device_control_switch.screen_info_t
	6,  // 12: local_service.set_proxy.proxy_type:type_name -> local_service.set_proxy.proxy_type_t
	51, // 13: local_service.send_full_screen_to_peer_response.error:type_name -> error_code
	51, // 14: local_service.register_webrtc_token_response.error:type_name -> error_code
	51, // 15: local_service.limit_file_transfer_speed_response.error:type_name -> error_code
	51, // 16: local_service.send_chat_message_response.error:type_name -> error_code
	51, // 17: local_service.mirror_or_extend_screen_response.error:type_name -> error_code
	51, // 18: local_service.report_log_file_response.error:type_name -> error_code
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_local_service_proto_init() }
func file_local_service_proto_init() {
	if File_local_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_local_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Exit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Check); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoginAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCapturerPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCapturerPortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelConnectPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdnRouteChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerConnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerDisconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceControlSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceControlSwitchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeSoftware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterClipboardPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterClipboardPortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynchronizeClientState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRayfilePort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRayfilePortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFullScreenToPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendFullScreenToPeerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWebrtcToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWebrtcTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitFileTransferSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitFileTransferSpeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendChatMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorOrExtendScreen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MirrorOrExtendScreenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportLogFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportLogFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteProgram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_local_service_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceControlSwitchScreenInfoT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_local_service_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_local_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_local_service_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_local_service_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_local_service_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_local_service_proto_msgTypes[25].OneofWrappers = []interface{}{}
	file_local_service_proto_msgTypes[28].OneofWrappers = []interface{}{}
	file_local_service_proto_msgTypes[30].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_local_service_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_local_service_proto_goTypes,
		DependencyIndexes: file_local_service_proto_depIdxs,
		EnumInfos:         file_local_service_proto_enumTypes,
		MessageInfos:      file_local_service_proto_msgTypes,
	}.Build()
	File_local_service_proto = out.File
	file_local_service_proto_rawDesc = nil
	file_local_service_proto_goTypes = nil
	file_local_service_proto_depIdxs = nil
}

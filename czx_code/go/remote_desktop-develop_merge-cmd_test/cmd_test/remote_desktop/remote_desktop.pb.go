// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.20.1
// source: remote_desktop.proto

package remote_desktop

import (
	common "cmd_test/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NAT类型枚举
type NAT_BEHAVIOR int32

const (
	NAT_BEHAVIOR_NAT_BEHAVIOR_UnknownBehavior                NAT_BEHAVIOR = 0
	NAT_BEHAVIOR_NAT_BEHAVIOR_DirectMapping                  NAT_BEHAVIOR = 1 // IP address and port are the same between client and server view (NO NAT)
	NAT_BEHAVIOR_NAT_BEHAVIOR_EndpointIndependentMapping     NAT_BEHAVIOR = 2 // same mapping regardless of IP:port original packet sent to (the kind of NAT we like)
	NAT_BEHAVIOR_NAT_BEHAVIOR_AddressDependentMapping        NAT_BEHAVIOR = 3 // mapping changes for local socket based on remote IP address only, but remote port can change (partially symmetric, not great)
	NAT_BEHAVIOR_NAT_BEHAVIOR_AddressAndPortDependentMapping NAT_BEHAVIOR = 4 // different port mapping if the ip address or port change (symmetric NAT, difficult to predict port mappings)
)

// Enum value maps for NAT_BEHAVIOR.
var (
	NAT_BEHAVIOR_name = map[int32]string{
		0: "NAT_BEHAVIOR_UnknownBehavior",
		1: "NAT_BEHAVIOR_DirectMapping",
		2: "NAT_BEHAVIOR_EndpointIndependentMapping",
		3: "NAT_BEHAVIOR_AddressDependentMapping",
		4: "NAT_BEHAVIOR_AddressAndPortDependentMapping",
	}
	NAT_BEHAVIOR_value = map[string]int32{
		"NAT_BEHAVIOR_UnknownBehavior":                0,
		"NAT_BEHAVIOR_DirectMapping":                  1,
		"NAT_BEHAVIOR_EndpointIndependentMapping":     2,
		"NAT_BEHAVIOR_AddressDependentMapping":        3,
		"NAT_BEHAVIOR_AddressAndPortDependentMapping": 4,
	}
)

func (x NAT_BEHAVIOR) Enum() *NAT_BEHAVIOR {
	p := new(NAT_BEHAVIOR)
	*p = x
	return p
}

func (x NAT_BEHAVIOR) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NAT_BEHAVIOR) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[0].Descriptor()
}

func (NAT_BEHAVIOR) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[0]
}

func (x NAT_BEHAVIOR) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NAT_BEHAVIOR.Descriptor instead.
func (NAT_BEHAVIOR) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{0}
}

// NAT类型
type NAT_TYPE int32

const (
	NAT_TYPE_NAT_UnknownType    NAT_TYPE = 0
	NAT_TYPE_NAT_DirectMapping  NAT_TYPE = 1
	NAT_TYPE_NAT_FullCone       NAT_TYPE = 2
	NAT_TYPE_NAT_IpRestricted   NAT_TYPE = 3
	NAT_TYPE_NAT_PortRestricted NAT_TYPE = 4
	NAT_TYPE_NAT_Symmetric      NAT_TYPE = 5
)

// Enum value maps for NAT_TYPE.
var (
	NAT_TYPE_name = map[int32]string{
		0: "NAT_UnknownType",
		1: "NAT_DirectMapping",
		2: "NAT_FullCone",
		3: "NAT_IpRestricted",
		4: "NAT_PortRestricted",
		5: "NAT_Symmetric",
	}
	NAT_TYPE_value = map[string]int32{
		"NAT_UnknownType":    0,
		"NAT_DirectMapping":  1,
		"NAT_FullCone":       2,
		"NAT_IpRestricted":   3,
		"NAT_PortRestricted": 4,
		"NAT_Symmetric":      5,
	}
)

func (x NAT_TYPE) Enum() *NAT_TYPE {
	p := new(NAT_TYPE)
	*p = x
	return p
}

func (x NAT_TYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NAT_TYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[1].Descriptor()
}

func (NAT_TYPE) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[1]
}

func (x NAT_TYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NAT_TYPE.Descriptor instead.
func (NAT_TYPE) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{1}
}

// 消息类型
type MessageType int32

const (
	MessageType_msg_none                                 MessageType = 0
	MessageType_msg_heart                                MessageType = 100
	MessageType_msg_check                                MessageType = 101
	MessageType_msg_check_response                       MessageType = 102
	MessageType_msg_register_id                          MessageType = 103
	MessageType_msg_register_id_response                 MessageType = 104
	MessageType_msg_set_local_sdn_info                   MessageType = 105
	MessageType_msg_set_local_sdn_info_response          MessageType = 106
	MessageType_msg_get_device_sdn_info                  MessageType = 107
	MessageType_msg_get_device_sdn_info_response         MessageType = 108
	MessageType_msg_login                                MessageType = 109
	MessageType_msg_login_response                       MessageType = 110
	MessageType_msg_logout                               MessageType = 111
	MessageType_msg_logout_response                      MessageType = 112
	MessageType_msg_get_group_list                       MessageType = 113
	MessageType_msg_get_group_list_response              MessageType = 114
	MessageType_msg_create_group                         MessageType = 115
	MessageType_msg_create_group_response                MessageType = 116
	MessageType_msg_get_device_list                      MessageType = 117
	MessageType_msg_get_device_list_response             MessageType = 118
	MessageType_msg_add_device                           MessageType = 119
	MessageType_msg_add_device_response                  MessageType = 120
	MessageType_msg_delete_device                        MessageType = 121
	MessageType_msg_delete_device_response               MessageType = 122
	MessageType_msg_set_device_info                      MessageType = 123
	MessageType_msg_set_device_info_response             MessageType = 124
	MessageType_msg_get_sdn_root_info                    MessageType = 125
	MessageType_msg_get_sdn_root_info_response           MessageType = 126
	MessageType_msg_run_command                          MessageType = 127
	MessageType_msg_run_command_response                 MessageType = 128
	MessageType_msg_delete_group                         MessageType = 129
	MessageType_msg_delete_group_response                MessageType = 130
	MessageType_msg_set_group_info                       MessageType = 131
	MessageType_msg_set_group_info_response              MessageType = 132
	MessageType_msg_report_connection_event              MessageType = 133
	MessageType_msg_report_connection_event_response     MessageType = 134
	MessageType_msg_license_changed                      MessageType = 135
	MessageType_msg_get_user_info                        MessageType = 136
	MessageType_msg_get_user_info_response               MessageType = 137
	MessageType_msg_report_connection_status             MessageType = 138
	MessageType_msg_push_message                         MessageType = 139
	MessageType_msg_report_net_info                      MessageType = 140
	MessageType_msg_report_net_info_response             MessageType = 141
	MessageType_msg_wol                                  MessageType = 142
	MessageType_msg_subscribe_recent_connection          MessageType = 143
	MessageType_msg_subscribe_recent_connection_response MessageType = 144
	MessageType_msg_query_recent_device_status           MessageType = 145
	MessageType_msg_query_recent_device_status_response  MessageType = 146
	MessageType_msg_get_dns_domain                       MessageType = 147
	MessageType_msg_get_dns_domain_response              MessageType = 148
	MessageType_msg_create_room                          MessageType = 149
	MessageType_msg_create_room_response                 MessageType = 150
	MessageType_msg_get_ice_server                       MessageType = 151
	MessageType_msg_get_ice_server_response              MessageType = 152
	MessageType_msg_forward_data                         MessageType = 153
	MessageType_msg_forward_data_response                MessageType = 154
	MessageType_msg_gen_device_code                      MessageType = 155
	MessageType_msg_gen_device_code_response             MessageType = 156
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:   "msg_none",
		100: "msg_heart",
		101: "msg_check",
		102: "msg_check_response",
		103: "msg_register_id",
		104: "msg_register_id_response",
		105: "msg_set_local_sdn_info",
		106: "msg_set_local_sdn_info_response",
		107: "msg_get_device_sdn_info",
		108: "msg_get_device_sdn_info_response",
		109: "msg_login",
		110: "msg_login_response",
		111: "msg_logout",
		112: "msg_logout_response",
		113: "msg_get_group_list",
		114: "msg_get_group_list_response",
		115: "msg_create_group",
		116: "msg_create_group_response",
		117: "msg_get_device_list",
		118: "msg_get_device_list_response",
		119: "msg_add_device",
		120: "msg_add_device_response",
		121: "msg_delete_device",
		122: "msg_delete_device_response",
		123: "msg_set_device_info",
		124: "msg_set_device_info_response",
		125: "msg_get_sdn_root_info",
		126: "msg_get_sdn_root_info_response",
		127: "msg_run_command",
		128: "msg_run_command_response",
		129: "msg_delete_group",
		130: "msg_delete_group_response",
		131: "msg_set_group_info",
		132: "msg_set_group_info_response",
		133: "msg_report_connection_event",
		134: "msg_report_connection_event_response",
		135: "msg_license_changed",
		136: "msg_get_user_info",
		137: "msg_get_user_info_response",
		138: "msg_report_connection_status",
		139: "msg_push_message",
		140: "msg_report_net_info",
		141: "msg_report_net_info_response",
		142: "msg_wol",
		143: "msg_subscribe_recent_connection",
		144: "msg_subscribe_recent_connection_response",
		145: "msg_query_recent_device_status",
		146: "msg_query_recent_device_status_response",
		147: "msg_get_dns_domain",
		148: "msg_get_dns_domain_response",
		149: "msg_create_room",
		150: "msg_create_room_response",
		151: "msg_get_ice_server",
		152: "msg_get_ice_server_response",
		153: "msg_forward_data",
		154: "msg_forward_data_response",
		155: "msg_gen_device_code",
		156: "msg_gen_device_code_response",
	}
	MessageType_value = map[string]int32{
		"msg_none":                                 0,
		"msg_heart":                                100,
		"msg_check":                                101,
		"msg_check_response":                       102,
		"msg_register_id":                          103,
		"msg_register_id_response":                 104,
		"msg_set_local_sdn_info":                   105,
		"msg_set_local_sdn_info_response":          106,
		"msg_get_device_sdn_info":                  107,
		"msg_get_device_sdn_info_response":         108,
		"msg_login":                                109,
		"msg_login_response":                       110,
		"msg_logout":                               111,
		"msg_logout_response":                      112,
		"msg_get_group_list":                       113,
		"msg_get_group_list_response":              114,
		"msg_create_group":                         115,
		"msg_create_group_response":                116,
		"msg_get_device_list":                      117,
		"msg_get_device_list_response":             118,
		"msg_add_device":                           119,
		"msg_add_device_response":                  120,
		"msg_delete_device":                        121,
		"msg_delete_device_response":               122,
		"msg_set_device_info":                      123,
		"msg_set_device_info_response":             124,
		"msg_get_sdn_root_info":                    125,
		"msg_get_sdn_root_info_response":           126,
		"msg_run_command":                          127,
		"msg_run_command_response":                 128,
		"msg_delete_group":                         129,
		"msg_delete_group_response":                130,
		"msg_set_group_info":                       131,
		"msg_set_group_info_response":              132,
		"msg_report_connection_event":              133,
		"msg_report_connection_event_response":     134,
		"msg_license_changed":                      135,
		"msg_get_user_info":                        136,
		"msg_get_user_info_response":               137,
		"msg_report_connection_status":             138,
		"msg_push_message":                         139,
		"msg_report_net_info":                      140,
		"msg_report_net_info_response":             141,
		"msg_wol":                                  142,
		"msg_subscribe_recent_connection":          143,
		"msg_subscribe_recent_connection_response": 144,
		"msg_query_recent_device_status":           145,
		"msg_query_recent_device_status_response":  146,
		"msg_get_dns_domain":                       147,
		"msg_get_dns_domain_response":              148,
		"msg_create_room":                          149,
		"msg_create_room_response":                 150,
		"msg_get_ice_server":                       151,
		"msg_get_ice_server_response":              152,
		"msg_forward_data":                         153,
		"msg_forward_data_response":                154,
		"msg_gen_device_code":                      155,
		"msg_gen_device_code_response":             156,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[2].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[2]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{2}
}

// 渠道类型枚举
type ChannelType int32

const (
	// 官网
	ChannelType_official ChannelType = 0
	// ios App Store
	ChannelType_appstore ChannelType = 1
	// 华为
	ChannelType_huawei ChannelType = 2
	// 小米
	ChannelType_xiaomi ChannelType = 3
	// vivo
	ChannelType_vivo ChannelType = 4
	// oppo
	ChannelType_oppo ChannelType = 5
	// 应用宝
	ChannelType_qq ChannelType = 6
	// 其他下载站Windows
	ChannelType_other_win ChannelType = 7
	// 官网win
	ChannelType_official_win ChannelType = 8
	// 官网mac
	ChannelType_official_mac ChannelType = 9
	// 官网安卓
	ChannelType_official_android ChannelType = 10
	// 微信公众号
	ChannelType_wechat_official_account ChannelType = 11
	// web浏览器
	ChannelType_web ChannelType = 12
	// bilibili
	ChannelType_bilibili ChannelType = 13
	// google play
	ChannelType_google_play ChannelType = 14
	// 奇妙应用
	ChannelType_wonderful_app ChannelType = 15
	// 青椒云一体机
	ChannelType_qingjiao_box ChannelType = 16
	// 海外小米
	ChannelType_overseas_xiaomi ChannelType = 17
	// 海外华为
	ChannelType_overseas_huawei ChannelType = 18
	// 海外三星
	ChannelType_overseas_samsung ChannelType = 19
)

// Enum value maps for ChannelType.
var (
	ChannelType_name = map[int32]string{
		0:  "official",
		1:  "appstore",
		2:  "huawei",
		3:  "xiaomi",
		4:  "vivo",
		5:  "oppo",
		6:  "qq",
		7:  "other_win",
		8:  "official_win",
		9:  "official_mac",
		10: "official_android",
		11: "wechat_official_account",
		12: "web",
		13: "bilibili",
		14: "google_play",
		15: "wonderful_app",
		16: "qingjiao_box",
		17: "overseas_xiaomi",
		18: "overseas_huawei",
		19: "overseas_samsung",
	}
	ChannelType_value = map[string]int32{
		"official":                0,
		"appstore":                1,
		"huawei":                  2,
		"xiaomi":                  3,
		"vivo":                    4,
		"oppo":                    5,
		"qq":                      6,
		"other_win":               7,
		"official_win":            8,
		"official_mac":            9,
		"official_android":        10,
		"wechat_official_account": 11,
		"web":                     12,
		"bilibili":                13,
		"google_play":             14,
		"wonderful_app":           15,
		"qingjiao_box":            16,
		"overseas_xiaomi":         17,
		"overseas_huawei":         18,
		"overseas_samsung":        19,
	}
)

func (x ChannelType) Enum() *ChannelType {
	p := new(ChannelType)
	*p = x
	return p
}

func (x ChannelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChannelType) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[3].Descriptor()
}

func (ChannelType) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[3]
}

func (x ChannelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChannelType.Descriptor instead.
func (ChannelType) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{3}
}

type GetDeviceListResponseDeviceStatusT int32

const (
	// 离线
	GetDeviceListResponse_offline GetDeviceListResponseDeviceStatusT = 0
	// 在线
	GetDeviceListResponse_online GetDeviceListResponseDeviceStatusT = 1
)

// Enum value maps for GetDeviceListResponseDeviceStatusT.
var (
	GetDeviceListResponseDeviceStatusT_name = map[int32]string{
		0: "offline",
		1: "online",
	}
	GetDeviceListResponseDeviceStatusT_value = map[string]int32{
		"offline": 0,
		"online":  1,
	}
)

func (x GetDeviceListResponseDeviceStatusT) Enum() *GetDeviceListResponseDeviceStatusT {
	p := new(GetDeviceListResponseDeviceStatusT)
	*p = x
	return p
}

func (x GetDeviceListResponseDeviceStatusT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetDeviceListResponseDeviceStatusT) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[4].Descriptor()
}

func (GetDeviceListResponseDeviceStatusT) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[4]
}

func (x GetDeviceListResponseDeviceStatusT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetDeviceListResponseDeviceStatusT.Descriptor instead.
func (GetDeviceListResponseDeviceStatusT) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{18, 0}
}

type RunCommandCommandTypeT int32

const (
	// 关机
	RunCommand_shutdown RunCommandCommandTypeT = 0
	// 重启
	RunCommand_reboot RunCommandCommandTypeT = 1
	// 锁定
	RunCommand_lock RunCommandCommandTypeT = 2
	// Ctrl + Alt + Del
	RunCommand_ctrl_alt_del RunCommandCommandTypeT = 3
	// 注销
	RunCommand_logoff RunCommandCommandTypeT = 4
	// 资源管理器
	RunCommand_explorer RunCommandCommandTypeT = 5
	// 任务管理器
	RunCommand_task_manager RunCommandCommandTypeT = 6
)

// Enum value maps for RunCommandCommandTypeT.
var (
	RunCommandCommandTypeT_name = map[int32]string{
		0: "shutdown",
		1: "reboot",
		2: "lock",
		3: "ctrl_alt_del",
		4: "logoff",
		5: "explorer",
		6: "task_manager",
	}
	RunCommandCommandTypeT_value = map[string]int32{
		"shutdown":     0,
		"reboot":       1,
		"lock":         2,
		"ctrl_alt_del": 3,
		"logoff":       4,
		"explorer":     5,
		"task_manager": 6,
	}
)

func (x RunCommandCommandTypeT) Enum() *RunCommandCommandTypeT {
	p := new(RunCommandCommandTypeT)
	*p = x
	return p
}

func (x RunCommandCommandTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunCommandCommandTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[5].Descriptor()
}

func (RunCommandCommandTypeT) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[5]
}

func (x RunCommandCommandTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunCommandCommandTypeT.Descriptor instead.
func (RunCommandCommandTypeT) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{27, 0}
}

type ReportConnectionEventEventTypeT int32

const (
	// 已连接
	ReportConnectionEvent_Connected ReportConnectionEventEventTypeT = 0
	// 连接断开
	ReportConnectionEvent_Disconnected ReportConnectionEventEventTypeT = 1
)

// Enum value maps for ReportConnectionEventEventTypeT.
var (
	ReportConnectionEventEventTypeT_name = map[int32]string{
		0: "Connected",
		1: "Disconnected",
	}
	ReportConnectionEventEventTypeT_value = map[string]int32{
		"Connected":    0,
		"Disconnected": 1,
	}
)

func (x ReportConnectionEventEventTypeT) Enum() *ReportConnectionEventEventTypeT {
	p := new(ReportConnectionEventEventTypeT)
	*p = x
	return p
}

func (x ReportConnectionEventEventTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportConnectionEventEventTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[6].Descriptor()
}

func (ReportConnectionEventEventTypeT) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[6]
}

func (x ReportConnectionEventEventTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportConnectionEventEventTypeT.Descriptor instead.
func (ReportConnectionEventEventTypeT) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{33, 0}
}

type ReportConnectionEventConnectionTypeT int32

const (
	// 免费连接
	ReportConnectionEvent_Free ReportConnectionEventConnectionTypeT = 0
	// 专业连接
	ReportConnectionEvent_Professional ReportConnectionEventConnectionTypeT = 1
	// 远程连接（后台业务需求：不区分免费、专业）
	ReportConnectionEvent_Remote ReportConnectionEventConnectionTypeT = 2
)

// Enum value maps for ReportConnectionEventConnectionTypeT.
var (
	ReportConnectionEventConnectionTypeT_name = map[int32]string{
		0: "Free",
		1: "Professional",
		2: "Remote",
	}
	ReportConnectionEventConnectionTypeT_value = map[string]int32{
		"Free":         0,
		"Professional": 1,
		"Remote":       2,
	}
)

func (x ReportConnectionEventConnectionTypeT) Enum() *ReportConnectionEventConnectionTypeT {
	p := new(ReportConnectionEventConnectionTypeT)
	*p = x
	return p
}

func (x ReportConnectionEventConnectionTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportConnectionEventConnectionTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[7].Descriptor()
}

func (ReportConnectionEventConnectionTypeT) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[7]
}

func (x ReportConnectionEventConnectionTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportConnectionEventConnectionTypeT.Descriptor instead.
func (ReportConnectionEventConnectionTypeT) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{33, 1}
}

type GetUserInfoResponseAccountTypeT int32

const (
	// 无效值
	GetUserInfoResponse_None GetUserInfoResponseAccountTypeT = 0
	// 免费版
	GetUserInfoResponse_Free GetUserInfoResponseAccountTypeT = 1
	// 专业版
	GetUserInfoResponse_Professional GetUserInfoResponseAccountTypeT = 2
)

// Enum value maps for GetUserInfoResponseAccountTypeT.
var (
	GetUserInfoResponseAccountTypeT_name = map[int32]string{
		0: "None",
		1: "Free",
		2: "Professional",
	}
	GetUserInfoResponseAccountTypeT_value = map[string]int32{
		"None":         0,
		"Free":         1,
		"Professional": 2,
	}
)

func (x GetUserInfoResponseAccountTypeT) Enum() *GetUserInfoResponseAccountTypeT {
	p := new(GetUserInfoResponseAccountTypeT)
	*p = x
	return p
}

func (x GetUserInfoResponseAccountTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetUserInfoResponseAccountTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[8].Descriptor()
}

func (GetUserInfoResponseAccountTypeT) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[8]
}

func (x GetUserInfoResponseAccountTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetUserInfoResponseAccountTypeT.Descriptor instead.
func (GetUserInfoResponseAccountTypeT) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{37, 0}
}

type ReportConnectionStatusSdnRouteTypeT int32

const (
	// 中转
	ReportConnectionStatus_forward ReportConnectionStatusSdnRouteTypeT = 0
	// 直连
	ReportConnectionStatus_direct ReportConnectionStatusSdnRouteTypeT = 1
	// TCP
	ReportConnectionStatus_tcp ReportConnectionStatusSdnRouteTypeT = 2
)

// Enum value maps for ReportConnectionStatusSdnRouteTypeT.
var (
	ReportConnectionStatusSdnRouteTypeT_name = map[int32]string{
		0: "forward",
		1: "direct",
		2: "tcp",
	}
	ReportConnectionStatusSdnRouteTypeT_value = map[string]int32{
		"forward": 0,
		"direct":  1,
		"tcp":     2,
	}
)

func (x ReportConnectionStatusSdnRouteTypeT) Enum() *ReportConnectionStatusSdnRouteTypeT {
	p := new(ReportConnectionStatusSdnRouteTypeT)
	*p = x
	return p
}

func (x ReportConnectionStatusSdnRouteTypeT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReportConnectionStatusSdnRouteTypeT) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[9].Descriptor()
}

func (ReportConnectionStatusSdnRouteTypeT) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[9]
}

func (x ReportConnectionStatusSdnRouteTypeT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReportConnectionStatusSdnRouteTypeT.Descriptor instead.
func (ReportConnectionStatusSdnRouteTypeT) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{38, 0}
}

type QueryRecentDeviceStatusResponseDeviceStatusT int32

const (
	// 离线
	QueryRecentDeviceStatusResponse_offline QueryRecentDeviceStatusResponseDeviceStatusT = 0
	// 在线
	QueryRecentDeviceStatusResponse_online QueryRecentDeviceStatusResponseDeviceStatusT = 1
)

// Enum value maps for QueryRecentDeviceStatusResponseDeviceStatusT.
var (
	QueryRecentDeviceStatusResponseDeviceStatusT_name = map[int32]string{
		0: "offline",
		1: "online",
	}
	QueryRecentDeviceStatusResponseDeviceStatusT_value = map[string]int32{
		"offline": 0,
		"online":  1,
	}
)

func (x QueryRecentDeviceStatusResponseDeviceStatusT) Enum() *QueryRecentDeviceStatusResponseDeviceStatusT {
	p := new(QueryRecentDeviceStatusResponseDeviceStatusT)
	*p = x
	return p
}

func (x QueryRecentDeviceStatusResponseDeviceStatusT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryRecentDeviceStatusResponseDeviceStatusT) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_desktop_proto_enumTypes[10].Descriptor()
}

func (QueryRecentDeviceStatusResponseDeviceStatusT) Type() protoreflect.EnumType {
	return &file_remote_desktop_proto_enumTypes[10]
}

func (x QueryRecentDeviceStatusResponseDeviceStatusT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryRecentDeviceStatusResponseDeviceStatusT.Descriptor instead.
func (QueryRecentDeviceStatusResponseDeviceStatusT) EnumDescriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{46, 0}
}

// 心跳消息   C <-> S
type Heart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *Heart) Reset() {
	*x = Heart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heart) ProtoMessage() {}

func (x *Heart) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heart.ProtoReflect.Descriptor instead.
func (*Heart) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{0}
}

func (x *Heart) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 检查   C -> S
type Check struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 平台
	Platform common.PlatformType `protobuf:"varint,2,opt,name=platform,proto3,enum=PlatformType" json:"platform,omitempty"`
	// 版本号
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Check) Reset() {
	*x = Check{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Check) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Check) ProtoMessage() {}

func (x *Check) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Check.ProtoReflect.Descriptor instead.
func (*Check) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{1}
}

func (x *Check) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Check) GetPlatform() common.PlatformType {
	if x != nil {
		return x.Platform
	}
	return common.PlatformType_windows
}

func (x *Check) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// 检查响应   S -> C
type CheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *CheckResponse) Reset() {
	*x = CheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResponse) ProtoMessage() {}

func (x *CheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResponse.ProtoReflect.Descriptor instead.
func (*CheckResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{2}
}

func (x *CheckResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CheckResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 注册设备ID   C -> S
type RegisterId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 已在服务器上注册的ID
	DeviceId []byte `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 客户端MAC地址
	MacAddr []byte `protobuf:"bytes,3,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	// 设备系统平台
	Platform common.PlatformType `protobuf:"varint,4,opt,name=platform,proto3,enum=PlatformType" json:"platform,omitempty"`
	// 本机设备名称
	MachineName []byte `protobuf:"bytes,5,opt,name=machine_name,json=machineName,proto3" json:"machine_name,omitempty"`
	// 本机系统版本号 例如: Windows 10  MacOS 12.10
	SystemVersion []byte `protobuf:"bytes,6,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	// NAT类型
	NatBehavior NAT_BEHAVIOR `protobuf:"varint,7,opt,name=nat_behavior,json=natBehavior,proto3,enum=remote_desktop.NAT_BEHAVIOR" json:"nat_behavior,omitempty"`
	// 版本号
	Version []byte `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	// 渠道
	Channel ChannelType `protobuf:"varint,9,opt,name=channel,proto3,enum=remote_desktop.ChannelType" json:"channel,omitempty"`
	// 设备品牌
	Brand []byte `protobuf:"bytes,10,opt,name=brand,proto3" json:"brand,omitempty"`
}

func (x *RegisterId) Reset() {
	*x = RegisterId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterId) ProtoMessage() {}

func (x *RegisterId) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterId.ProtoReflect.Descriptor instead.
func (*RegisterId) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterId) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *RegisterId) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *RegisterId) GetMacAddr() []byte {
	if x != nil {
		return x.MacAddr
	}
	return nil
}

func (x *RegisterId) GetPlatform() common.PlatformType {
	if x != nil {
		return x.Platform
	}
	return common.PlatformType_windows
}

func (x *RegisterId) GetMachineName() []byte {
	if x != nil {
		return x.MachineName
	}
	return nil
}

func (x *RegisterId) GetSystemVersion() []byte {
	if x != nil {
		return x.SystemVersion
	}
	return nil
}

func (x *RegisterId) GetNatBehavior() NAT_BEHAVIOR {
	if x != nil {
		return x.NatBehavior
	}
	return NAT_BEHAVIOR_NAT_BEHAVIOR_UnknownBehavior
}

func (x *RegisterId) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *RegisterId) GetChannel() ChannelType {
	if x != nil {
		return x.Channel
	}
	return ChannelType_official
}

func (x *RegisterId) GetBrand() []byte {
	if x != nil {
		return x.Brand
	}
	return nil
}

// 注册设备ID响应   S -> C
type RegisterIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 设备公网IP地址
	Ip []byte `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
}

func (x *RegisterIdResponse) Reset() {
	*x = RegisterIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterIdResponse) ProtoMessage() {}

func (x *RegisterIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterIdResponse.ProtoReflect.Descriptor instead.
func (*RegisterIdResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterIdResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *RegisterIdResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *RegisterIdResponse) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

// 设置本地sdn id
type SetLocalSdnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32  `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	SdnId     []byte `protobuf:"bytes,2,opt,name=sdn_id,json=sdnId,proto3" json:"sdn_id,omitempty"`
	// 本地侦听的端口
	Port int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// 当前客户端是否支持专业连接
	SupportProfessionalConnection bool `protobuf:"varint,4,opt,name=support_professional_connection,json=supportProfessionalConnection,proto3" json:"support_professional_connection,omitempty"`
}

func (x *SetLocalSdnInfo) Reset() {
	*x = SetLocalSdnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLocalSdnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLocalSdnInfo) ProtoMessage() {}

func (x *SetLocalSdnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLocalSdnInfo.ProtoReflect.Descriptor instead.
func (*SetLocalSdnInfo) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{5}
}

func (x *SetLocalSdnInfo) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SetLocalSdnInfo) GetSdnId() []byte {
	if x != nil {
		return x.SdnId
	}
	return nil
}

func (x *SetLocalSdnInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SetLocalSdnInfo) GetSupportProfessionalConnection() bool {
	if x != nil {
		return x.SupportProfessionalConnection
	}
	return false
}

// 设置本地sdn id响应
type SetLocalSdnInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32            `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Error     common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *SetLocalSdnInfoResponse) Reset() {
	*x = SetLocalSdnInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLocalSdnInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLocalSdnInfoResponse) ProtoMessage() {}

func (x *SetLocalSdnInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLocalSdnInfoResponse.ProtoReflect.Descriptor instead.
func (*SetLocalSdnInfoResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{6}
}

func (x *SetLocalSdnInfoResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SetLocalSdnInfoResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 根据对端ID获取sdn id
type GetDeviceSdnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 对端ID
	DeviceId []byte `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *GetDeviceSdnInfo) Reset() {
	*x = GetDeviceSdnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceSdnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceSdnInfo) ProtoMessage() {}

func (x *GetDeviceSdnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceSdnInfo.ProtoReflect.Descriptor instead.
func (*GetDeviceSdnInfo) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{7}
}

func (x *GetDeviceSdnInfo) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetDeviceSdnInfo) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

// 根据对端ID获取sdn id响应
type GetDeviceSdnInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 成功时返回目标端sdn id
	SdnId []byte `protobuf:"bytes,3,opt,name=sdn_id,json=sdnId,proto3" json:"sdn_id,omitempty"`
	// 成功时返回目标端侦听的端口
	Port int32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	// 当前客户端是否支持专业连接
	SupportProfessionalConnection bool `protobuf:"varint,5,opt,name=support_professional_connection,json=supportProfessionalConnection,proto3" json:"support_professional_connection,omitempty"`
	// 设备平台类型
	Platform common.PlatformType `protobuf:"varint,6,opt,name=platform,proto3,enum=PlatformType" json:"platform,omitempty"`
}

func (x *GetDeviceSdnInfoResponse) Reset() {
	*x = GetDeviceSdnInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceSdnInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceSdnInfoResponse) ProtoMessage() {}

func (x *GetDeviceSdnInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceSdnInfoResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceSdnInfoResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{8}
}

func (x *GetDeviceSdnInfoResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetDeviceSdnInfoResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *GetDeviceSdnInfoResponse) GetSdnId() []byte {
	if x != nil {
		return x.SdnId
	}
	return nil
}

func (x *GetDeviceSdnInfoResponse) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GetDeviceSdnInfoResponse) GetSupportProfessionalConnection() bool {
	if x != nil {
		return x.SupportProfessionalConnection
	}
	return false
}

func (x *GetDeviceSdnInfoResponse) GetPlatform() common.PlatformType {
	if x != nil {
		return x.Platform
	}
	return common.PlatformType_windows
}

// 登录账号
type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 账号
	Account []byte `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// 密码
	Password []byte `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{9}
}

func (x *Login) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Login) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Login) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

// 登录账号响应
type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{10}
}

func (x *LoginResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *LoginResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 登出账号
type Logout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *Logout) Reset() {
	*x = Logout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logout) ProtoMessage() {}

func (x *Logout) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logout.ProtoReflect.Descriptor instead.
func (*Logout) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{11}
}

func (x *Logout) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type LogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{12}
}

func (x *LogoutResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 获取分组列表
type GetGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *GetGroupList) Reset() {
	*x = GetGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupList) ProtoMessage() {}

func (x *GetGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupList.ProtoReflect.Descriptor instead.
func (*GetGroupList) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{13}
}

func (x *GetGroupList) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// 获取分组列表响应
type GetGroupListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 分组列表
	Item []*GetGroupListResponseGroupItem `protobuf:"bytes,3,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *GetGroupListResponse) Reset() {
	*x = GetGroupListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupListResponse) ProtoMessage() {}

func (x *GetGroupListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupListResponse.ProtoReflect.Descriptor instead.
func (*GetGroupListResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{14}
}

func (x *GetGroupListResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetGroupListResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *GetGroupListResponse) GetItem() []*GetGroupListResponseGroupItem {
	if x != nil {
		return x.Item
	}
	return nil
}

// 创建分组
type CreateGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 分组名称
	GroupName []byte `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// 上级分组ID
	ParentId int32 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *CreateGroup) Reset() {
	*x = CreateGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroup) ProtoMessage() {}

func (x *CreateGroup) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroup.ProtoReflect.Descriptor instead.
func (*CreateGroup) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{15}
}

func (x *CreateGroup) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CreateGroup) GetGroupName() []byte {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *CreateGroup) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

// 创建分组响应
type CreateGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 新创建分组的ID
	GroupId int32 `protobuf:"varint,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *CreateGroupResponse) Reset() {
	*x = CreateGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGroupResponse) ProtoMessage() {}

func (x *CreateGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateGroupResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{16}
}

func (x *CreateGroupResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CreateGroupResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *CreateGroupResponse) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 获取设备列表
type GetDeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 分组ID，获取指定分组下的设备列表，为0时获取所有设备
	GroupId int32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 是否显示隐藏的设备，例如IOS
	ShowHidden bool `protobuf:"varint,3,opt,name=show_hidden,json=showHidden,proto3" json:"show_hidden,omitempty"`
}

func (x *GetDeviceList) Reset() {
	*x = GetDeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceList) ProtoMessage() {}

func (x *GetDeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceList.ProtoReflect.Descriptor instead.
func (*GetDeviceList) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{17}
}

func (x *GetDeviceList) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetDeviceList) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetDeviceList) GetShowHidden() bool {
	if x != nil {
		return x.ShowHidden
	}
	return false
}

// 获取设备列表响应
type GetDeviceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 设备列表
	DeviceList []*GetDeviceListResponseDeviceItem `protobuf:"bytes,3,rep,name=device_list,json=deviceList,proto3" json:"device_list,omitempty"`
}

func (x *GetDeviceListResponse) Reset() {
	*x = GetDeviceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceListResponse) ProtoMessage() {}

func (x *GetDeviceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceListResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceListResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{18}
}

func (x *GetDeviceListResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetDeviceListResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *GetDeviceListResponse) GetDeviceList() []*GetDeviceListResponseDeviceItem {
	if x != nil {
		return x.DeviceList
	}
	return nil
}

// 添加设备（受控端）
type AddDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 设备ID
	DeviceId []byte `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 设备Key
	DeviceKey []byte `protobuf:"bytes,3,opt,name=device_key,json=deviceKey,proto3" json:"device_key,omitempty"`
	// 设备名称
	DeviceName []byte `protobuf:"bytes,4,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// 所属分组ID
	GroupId int32 `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *AddDevice) Reset() {
	*x = AddDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevice) ProtoMessage() {}

func (x *AddDevice) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevice.ProtoReflect.Descriptor instead.
func (*AddDevice) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{19}
}

func (x *AddDevice) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *AddDevice) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *AddDevice) GetDeviceKey() []byte {
	if x != nil {
		return x.DeviceKey
	}
	return nil
}

func (x *AddDevice) GetDeviceName() []byte {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *AddDevice) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 添加设备响应
type AddDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 成功时返回新添加设备的节点ID
	NodeId int32 `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// 所属分组ID
	GroupId int32 `protobuf:"varint,4,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *AddDeviceResponse) Reset() {
	*x = AddDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeviceResponse) ProtoMessage() {}

func (x *AddDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeviceResponse.ProtoReflect.Descriptor instead.
func (*AddDeviceResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{20}
}

func (x *AddDeviceResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *AddDeviceResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *AddDeviceResponse) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *AddDeviceResponse) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 删除设备
type DeleteDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 设备节点ID
	NodeId int32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *DeleteDevice) Reset() {
	*x = DeleteDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDevice) ProtoMessage() {}

func (x *DeleteDevice) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDevice.ProtoReflect.Descriptor instead.
func (*DeleteDevice) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteDevice) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *DeleteDevice) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// 删除设备响应
type DeleteDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *DeleteDeviceResponse) Reset() {
	*x = DeleteDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceResponse) ProtoMessage() {}

func (x *DeleteDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteDeviceResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *DeleteDeviceResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 修改设备信息
type SetDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 设备节点ID
	NodeId int32 `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// 设备ID
	DeviceId []byte `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 设备Key
	DeviceKey []byte `protobuf:"bytes,4,opt,name=device_key,json=deviceKey,proto3" json:"device_key,omitempty"`
	// 设备名称
	DeviceName []byte `protobuf:"bytes,5,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// 所属分组ID
	GroupId int32 `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *SetDeviceInfo) Reset() {
	*x = SetDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceInfo) ProtoMessage() {}

func (x *SetDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceInfo.ProtoReflect.Descriptor instead.
func (*SetDeviceInfo) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{23}
}

func (x *SetDeviceInfo) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SetDeviceInfo) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SetDeviceInfo) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *SetDeviceInfo) GetDeviceKey() []byte {
	if x != nil {
		return x.DeviceKey
	}
	return nil
}

func (x *SetDeviceInfo) GetDeviceName() []byte {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *SetDeviceInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 修改设备信息响应
type SetDeviceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *SetDeviceInfoResponse) Reset() {
	*x = SetDeviceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceInfoResponse) ProtoMessage() {}

func (x *SetDeviceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceInfoResponse.ProtoReflect.Descriptor instead.
func (*SetDeviceInfoResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{24}
}

func (x *SetDeviceInfoResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SetDeviceInfoResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

type GetSdnRootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// sdn序号
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetSdnRootInfo) Reset() {
	*x = GetSdnRootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSdnRootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSdnRootInfo) ProtoMessage() {}

func (x *GetSdnRootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSdnRootInfo.ProtoReflect.Descriptor instead.
func (*GetSdnRootInfo) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{25}
}

func (x *GetSdnRootInfo) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetSdnRootInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GetSdnRootInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Info []byte `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	// btb stun服务地址
	StunServerAddress []byte `protobuf:"bytes,3,opt,name=stun_server_address,json=stunServerAddress,proto3" json:"stun_server_address,omitempty"`
	// btb stun服务端口
	StunServerPort int32 `protobuf:"varint,4,opt,name=stun_server_port,json=stunServerPort,proto3" json:"stun_server_port,omitempty"`
}

func (x *GetSdnRootInfoResponse) Reset() {
	*x = GetSdnRootInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSdnRootInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSdnRootInfoResponse) ProtoMessage() {}

func (x *GetSdnRootInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSdnRootInfoResponse.ProtoReflect.Descriptor instead.
func (*GetSdnRootInfoResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{26}
}

func (x *GetSdnRootInfoResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetSdnRootInfoResponse) GetInfo() []byte {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetSdnRootInfoResponse) GetStunServerAddress() []byte {
	if x != nil {
		return x.StunServerAddress
	}
	return nil
}

func (x *GetSdnRootInfoResponse) GetStunServerPort() int32 {
	if x != nil {
		return x.StunServerPort
	}
	return 0
}

type RunCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 设备ID
	DeviceId []byte `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 设备Key
	DeviceKey []byte `protobuf:"bytes,3,opt,name=device_key,json=deviceKey,proto3" json:"device_key,omitempty"`
	// 指定目标端需要执行的操作
	CommandType RunCommandCommandTypeT `protobuf:"varint,4,opt,name=command_type,json=commandType,proto3,enum=remote_desktop.RunCommandCommandTypeT" json:"command_type,omitempty"`
	// 当前登录的账号
	Account []byte `protobuf:"bytes,5,opt,name=account,proto3" json:"account,omitempty"`
	// 判断是否我的设备
	DeviceMine bool `protobuf:"varint,6,opt,name=device_mine,json=deviceMine,proto3" json:"device_mine,omitempty"`
	// 判断是否免密连接
	NoPass bool `protobuf:"varint,7,opt,name=no_pass,json=noPass,proto3" json:"no_pass,omitempty"`
}

func (x *RunCommand) Reset() {
	*x = RunCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommand) ProtoMessage() {}

func (x *RunCommand) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommand.ProtoReflect.Descriptor instead.
func (*RunCommand) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{27}
}

func (x *RunCommand) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *RunCommand) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *RunCommand) GetDeviceKey() []byte {
	if x != nil {
		return x.DeviceKey
	}
	return nil
}

func (x *RunCommand) GetCommandType() RunCommandCommandTypeT {
	if x != nil {
		return x.CommandType
	}
	return RunCommand_shutdown
}

func (x *RunCommand) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *RunCommand) GetDeviceMine() bool {
	if x != nil {
		return x.DeviceMine
	}
	return false
}

func (x *RunCommand) GetNoPass() bool {
	if x != nil {
		return x.NoPass
	}
	return false
}

type RunCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *RunCommandResponse) Reset() {
	*x = RunCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommandResponse) ProtoMessage() {}

func (x *RunCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommandResponse.ProtoReflect.Descriptor instead.
func (*RunCommandResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{28}
}

func (x *RunCommandResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *RunCommandResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 删除分组
type DeleteGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 分组ID
	GroupId int32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (x *DeleteGroup) Reset() {
	*x = DeleteGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroup) ProtoMessage() {}

func (x *DeleteGroup) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroup.ProtoReflect.Descriptor instead.
func (*DeleteGroup) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteGroup) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *DeleteGroup) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

// 删除分组响应
type DeleteGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *DeleteGroupResponse) Reset() {
	*x = DeleteGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupResponse) ProtoMessage() {}

func (x *DeleteGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupResponse.ProtoReflect.Descriptor instead.
func (*DeleteGroupResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteGroupResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *DeleteGroupResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 修改分组信息
type SetGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 分组ID
	GroupId int32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 分组名称
	GroupName []byte `protobuf:"bytes,3,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// 上级分组ID
	ParentId int32 `protobuf:"varint,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *SetGroupInfo) Reset() {
	*x = SetGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupInfo) ProtoMessage() {}

func (x *SetGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupInfo.ProtoReflect.Descriptor instead.
func (*SetGroupInfo) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{31}
}

func (x *SetGroupInfo) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SetGroupInfo) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *SetGroupInfo) GetGroupName() []byte {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *SetGroupInfo) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

// 修改分组信息响应
type SetGroupInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *SetGroupInfoResponse) Reset() {
	*x = SetGroupInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGroupInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGroupInfoResponse) ProtoMessage() {}

func (x *SetGroupInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGroupInfoResponse.ProtoReflect.Descriptor instead.
func (*SetGroupInfoResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{32}
}

func (x *SetGroupInfoResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SetGroupInfoResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 上报连接事件
// 注意：存在客户端被异常结束后无法主动通知服务器“连接断开”消息，服务器端应在注册“已连接”消息的websocket连接断开后自动触发“连接断开”消息
type ReportConnectionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 事件类型
	EventType ReportConnectionEventEventTypeT `protobuf:"varint,2,opt,name=event_type,json=eventType,proto3,enum=remote_desktop.ReportConnectionEventEventTypeT" json:"event_type,omitempty"`
	// 连接类型
	ConnectionType ReportConnectionEventConnectionTypeT `protobuf:"varint,3,opt,name=connection_type,json=connectionType,proto3,enum=remote_desktop.ReportConnectionEventConnectionTypeT" json:"connection_type,omitempty"`
	// 主控端设备ID
	ControllerDeviceId []byte `protobuf:"bytes,4,opt,name=controller_device_id,json=controllerDeviceId,proto3" json:"controller_device_id,omitempty"`
	// 受控端设备ID
	PeerDeviceId []byte `protobuf:"bytes,5,opt,name=peer_device_id,json=peerDeviceId,proto3" json:"peer_device_id,omitempty"`
	// 操作系统版本
	OsVersion []byte `protobuf:"bytes,6,opt,name=os_version,json=osVersion,proto3" json:"os_version,omitempty"`
	// 客户端版本
	ClientVersion []byte `protobuf:"bytes,7,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	// 对端sdn id
	SdnId []byte `protobuf:"bytes,8,opt,name=sdn_id,json=sdnId,proto3" json:"sdn_id,omitempty"`
	// 当前连接的sdn服务器地址
	SdnIp []byte `protobuf:"bytes,9,opt,name=sdn_ip,json=sdnIp,proto3" json:"sdn_ip,omitempty"`
	// 连接ID
	ConnectionId int64 `protobuf:"varint,10,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *ReportConnectionEvent) Reset() {
	*x = ReportConnectionEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportConnectionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportConnectionEvent) ProtoMessage() {}

func (x *ReportConnectionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportConnectionEvent.ProtoReflect.Descriptor instead.
func (*ReportConnectionEvent) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{33}
}

func (x *ReportConnectionEvent) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReportConnectionEvent) GetEventType() ReportConnectionEventEventTypeT {
	if x != nil {
		return x.EventType
	}
	return ReportConnectionEvent_Connected
}

func (x *ReportConnectionEvent) GetConnectionType() ReportConnectionEventConnectionTypeT {
	if x != nil {
		return x.ConnectionType
	}
	return ReportConnectionEvent_Free
}

func (x *ReportConnectionEvent) GetControllerDeviceId() []byte {
	if x != nil {
		return x.ControllerDeviceId
	}
	return nil
}

func (x *ReportConnectionEvent) GetPeerDeviceId() []byte {
	if x != nil {
		return x.PeerDeviceId
	}
	return nil
}

func (x *ReportConnectionEvent) GetOsVersion() []byte {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (x *ReportConnectionEvent) GetClientVersion() []byte {
	if x != nil {
		return x.ClientVersion
	}
	return nil
}

func (x *ReportConnectionEvent) GetSdnId() []byte {
	if x != nil {
		return x.SdnId
	}
	return nil
}

func (x *ReportConnectionEvent) GetSdnIp() []byte {
	if x != nil {
		return x.SdnIp
	}
	return nil
}

func (x *ReportConnectionEvent) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

// 上报连接事件响应
type ReportConnectionEventResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 连接ID
	ConnectionId int64 `protobuf:"varint,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *ReportConnectionEventResponse) Reset() {
	*x = ReportConnectionEventResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportConnectionEventResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportConnectionEventResponse) ProtoMessage() {}

func (x *ReportConnectionEventResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportConnectionEventResponse.ProtoReflect.Descriptor instead.
func (*ReportConnectionEventResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{34}
}

func (x *ReportConnectionEventResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReportConnectionEventResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *ReportConnectionEventResponse) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

// 用户授权信息改变
type LicenseChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当前已使用专业连接数量
	CurrentProfessionalCount int32 `protobuf:"varint,1,opt,name=current_professional_count,json=currentProfessionalCount,proto3" json:"current_professional_count,omitempty"`
	// 当前账号最大专业连接数量
	MaxProfessionalCount int32 `protobuf:"varint,2,opt,name=max_professional_count,json=maxProfessionalCount,proto3" json:"max_professional_count,omitempty"`
}

func (x *LicenseChanged) Reset() {
	*x = LicenseChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseChanged) ProtoMessage() {}

func (x *LicenseChanged) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseChanged.ProtoReflect.Descriptor instead.
func (*LicenseChanged) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{35}
}

func (x *LicenseChanged) GetCurrentProfessionalCount() int32 {
	if x != nil {
		return x.CurrentProfessionalCount
	}
	return 0
}

func (x *LicenseChanged) GetMaxProfessionalCount() int32 {
	if x != nil {
		return x.MaxProfessionalCount
	}
	return 0
}

type GetUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *GetUserInfo) Reset() {
	*x = GetUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfo) ProtoMessage() {}

func (x *GetUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfo.ProtoReflect.Descriptor instead.
func (*GetUserInfo) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{36}
}

func (x *GetUserInfo) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type GetUserInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 服务器时间
	ServerTime int64 `protobuf:"varint,3,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	// 过期时间
	ExpireTime int64 `protobuf:"varint,4,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	// 账号类型
	AccountType GetUserInfoResponseAccountTypeT `protobuf:"varint,5,opt,name=account_type,json=accountType,proto3,enum=remote_desktop.GetUserInfoResponseAccountTypeT" json:"account_type,omitempty"`
}

func (x *GetUserInfoResponse) Reset() {
	*x = GetUserInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoResponse) ProtoMessage() {}

func (x *GetUserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoResponse.ProtoReflect.Descriptor instead.
func (*GetUserInfoResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{37}
}

func (x *GetUserInfoResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetUserInfoResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *GetUserInfoResponse) GetServerTime() int64 {
	if x != nil {
		return x.ServerTime
	}
	return 0
}

func (x *GetUserInfoResponse) GetExpireTime() int64 {
	if x != nil {
		return x.ExpireTime
	}
	return 0
}

func (x *GetUserInfoResponse) GetAccountType() GetUserInfoResponseAccountTypeT {
	if x != nil {
		return x.AccountType
	}
	return GetUserInfoResponse_None
}

type ReportConnectionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 对端sdn id，服务器可使用“当前设备ID+sdn_id”唯一标识一条连接
	SdnId []byte `protobuf:"bytes,2,opt,name=sdn_id,json=sdnId,proto3" json:"sdn_id,omitempty"`
	// 直连状态
	RouteType *ReportConnectionStatusSdnRouteTypeT `protobuf:"varint,3,opt,name=route_type,json=routeType,proto3,enum=remote_desktop.ReportConnectionStatusSdnRouteTypeT,oneof" json:"route_type,omitempty"`
	// 连接ID
	ConnectionId int64 `protobuf:"varint,4,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *ReportConnectionStatus) Reset() {
	*x = ReportConnectionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportConnectionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportConnectionStatus) ProtoMessage() {}

func (x *ReportConnectionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportConnectionStatus.ProtoReflect.Descriptor instead.
func (*ReportConnectionStatus) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{38}
}

func (x *ReportConnectionStatus) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReportConnectionStatus) GetSdnId() []byte {
	if x != nil {
		return x.SdnId
	}
	return nil
}

func (x *ReportConnectionStatus) GetRouteType() ReportConnectionStatusSdnRouteTypeT {
	if x != nil && x.RouteType != nil {
		return *x.RouteType
	}
	return ReportConnectionStatus_forward
}

func (x *ReportConnectionStatus) GetConnectionId() int64 {
	if x != nil {
		return x.ConnectionId
	}
	return 0
}

type PushMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 已修改密码
	ChangedPassword *bool `protobuf:"varint,1,opt,name=changed_password,json=changedPassword,proto3,oneof" json:"changed_password,omitempty"`
	// 版本升级
	Upgrade *bool `protobuf:"varint,2,opt,name=upgrade,proto3,oneof" json:"upgrade,omitempty"`
	// 通告更新
	AnnouncementChange *bool `protobuf:"varint,3,opt,name=announcement_change,json=announcementChange,proto3,oneof" json:"announcement_change,omitempty"`
	// 最近设备列表更新
	RecentDeviceListUpdate *bool `protobuf:"varint,4,opt,name=recent_device_list_update,json=recentDeviceListUpdate,proto3,oneof" json:"recent_device_list_update,omitempty"`
	// 受控设备列表更新
	ControlledDeviceListUpdate *bool `protobuf:"varint,5,opt,name=controlled_device_list_update,json=controlledDeviceListUpdate,proto3,oneof" json:"controlled_device_list_update,omitempty"`
	// 用户注销
	UserCancel *bool `protobuf:"varint,6,opt,name=user_cancel,json=userCancel,proto3,oneof" json:"user_cancel,omitempty"`
	// 设备列表推送关联的分组id
	GroupIdList []int32 `protobuf:"varint,7,rep,packed,name=group_id_list,json=groupIdList,proto3" json:"group_id_list,omitempty"`
	// 账号级别变更
	AccountLevelChange *bool `protobuf:"varint,8,opt,name=account_level_change,json=accountLevelChange,proto3,oneof" json:"account_level_change,omitempty"`
	// 分组变更客户端重新获取分组列表
	GroupChange *bool `protobuf:"varint,9,opt,name=group_change,json=groupChange,proto3,oneof" json:"group_change,omitempty"`
	// sdn变更推送
	SdnChange *bool `protobuf:"varint,10,opt,name=sdn_change,json=sdnChange,proto3,oneof" json:"sdn_change,omitempty"`
	// 用户帐号退出
	UserLogout *bool `protobuf:"varint,11,opt,name=user_logout,json=userLogout,proto3,oneof" json:"user_logout,omitempty"`
}

func (x *PushMessage) Reset() {
	*x = PushMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushMessage) ProtoMessage() {}

func (x *PushMessage) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushMessage.ProtoReflect.Descriptor instead.
func (*PushMessage) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{39}
}

func (x *PushMessage) GetChangedPassword() bool {
	if x != nil && x.ChangedPassword != nil {
		return *x.ChangedPassword
	}
	return false
}

func (x *PushMessage) GetUpgrade() bool {
	if x != nil && x.Upgrade != nil {
		return *x.Upgrade
	}
	return false
}

func (x *PushMessage) GetAnnouncementChange() bool {
	if x != nil && x.AnnouncementChange != nil {
		return *x.AnnouncementChange
	}
	return false
}

func (x *PushMessage) GetRecentDeviceListUpdate() bool {
	if x != nil && x.RecentDeviceListUpdate != nil {
		return *x.RecentDeviceListUpdate
	}
	return false
}

func (x *PushMessage) GetControlledDeviceListUpdate() bool {
	if x != nil && x.ControlledDeviceListUpdate != nil {
		return *x.ControlledDeviceListUpdate
	}
	return false
}

func (x *PushMessage) GetUserCancel() bool {
	if x != nil && x.UserCancel != nil {
		return *x.UserCancel
	}
	return false
}

func (x *PushMessage) GetGroupIdList() []int32 {
	if x != nil {
		return x.GroupIdList
	}
	return nil
}

func (x *PushMessage) GetAccountLevelChange() bool {
	if x != nil && x.AccountLevelChange != nil {
		return *x.AccountLevelChange
	}
	return false
}

func (x *PushMessage) GetGroupChange() bool {
	if x != nil && x.GroupChange != nil {
		return *x.GroupChange
	}
	return false
}

func (x *PushMessage) GetSdnChange() bool {
	if x != nil && x.SdnChange != nil {
		return *x.SdnChange
	}
	return false
}

func (x *PushMessage) GetUserLogout() bool {
	if x != nil && x.UserLogout != nil {
		return *x.UserLogout
	}
	return false
}

// 上报nat类型、网络带宽   C -> S
type ReportNetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId        int32    `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	NatType          NAT_TYPE `protobuf:"varint,2,opt,name=nat_type,json=natType,proto3,enum=remote_desktop.NAT_TYPE" json:"nat_type,omitempty"`
	NetDownloadSpeed int32    `protobuf:"varint,3,opt,name=net_download_speed,json=netDownloadSpeed,proto3" json:"net_download_speed,omitempty"`
	NetUploadSpeed   int32    `protobuf:"varint,4,opt,name=net_upload_speed,json=netUploadSpeed,proto3" json:"net_upload_speed,omitempty"`
	NetPacketLoss    float32  `protobuf:"fixed32,5,opt,name=net_packet_loss,json=netPacketLoss,proto3" json:"net_packet_loss,omitempty"`
}

func (x *ReportNetInfo) Reset() {
	*x = ReportNetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportNetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportNetInfo) ProtoMessage() {}

func (x *ReportNetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportNetInfo.ProtoReflect.Descriptor instead.
func (*ReportNetInfo) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{40}
}

func (x *ReportNetInfo) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReportNetInfo) GetNatType() NAT_TYPE {
	if x != nil {
		return x.NatType
	}
	return NAT_TYPE_NAT_UnknownType
}

func (x *ReportNetInfo) GetNetDownloadSpeed() int32 {
	if x != nil {
		return x.NetDownloadSpeed
	}
	return 0
}

func (x *ReportNetInfo) GetNetUploadSpeed() int32 {
	if x != nil {
		return x.NetUploadSpeed
	}
	return 0
}

func (x *ReportNetInfo) GetNetPacketLoss() float32 {
	if x != nil {
		return x.NetPacketLoss
	}
	return 0
}

// 上报nat类型、网络带宽响应   S -> C
type ReportNetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *ReportNetInfoResponse) Reset() {
	*x = ReportNetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportNetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportNetInfoResponse) ProtoMessage() {}

func (x *ReportNetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportNetInfoResponse.ProtoReflect.Descriptor instead.
func (*ReportNetInfoResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{41}
}

func (x *ReportNetInfoResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *ReportNetInfoResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

type Wol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 对端设备ID（主控端发起远程开机请求时填写）
	DeviceId []byte `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 设备网卡地址（发送给对端内网机器时由服务器填写）
	MacAddr []byte `protobuf:"bytes,2,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
}

func (x *Wol) Reset() {
	*x = Wol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wol) ProtoMessage() {}

func (x *Wol) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wol.ProtoReflect.Descriptor instead.
func (*Wol) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{42}
}

func (x *Wol) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *Wol) GetMacAddr() []byte {
	if x != nil {
		return x.MacAddr
	}
	return nil
}

// 订阅最近连接设备状态
type SubscribeRecentConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 设备码数组
	DeviceArray [][]byte `protobuf:"bytes,2,rep,name=device_array,json=deviceArray,proto3" json:"device_array,omitempty"`
}

func (x *SubscribeRecentConnection) Reset() {
	*x = SubscribeRecentConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRecentConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRecentConnection) ProtoMessage() {}

func (x *SubscribeRecentConnection) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRecentConnection.ProtoReflect.Descriptor instead.
func (*SubscribeRecentConnection) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{43}
}

func (x *SubscribeRecentConnection) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SubscribeRecentConnection) GetDeviceArray() [][]byte {
	if x != nil {
		return x.DeviceArray
	}
	return nil
}

// 订阅最近连接设备状态响应
type SubscribeRecentConnectionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *SubscribeRecentConnectionResponse) Reset() {
	*x = SubscribeRecentConnectionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRecentConnectionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRecentConnectionResponse) ProtoMessage() {}

func (x *SubscribeRecentConnectionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRecentConnectionResponse.ProtoReflect.Descriptor instead.
func (*SubscribeRecentConnectionResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{44}
}

func (x *SubscribeRecentConnectionResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *SubscribeRecentConnectionResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

type QueryRecentDeviceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 设备码数组
	DeviceArray [][]byte `protobuf:"bytes,2,rep,name=device_array,json=deviceArray,proto3" json:"device_array,omitempty"`
}

func (x *QueryRecentDeviceStatus) Reset() {
	*x = QueryRecentDeviceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRecentDeviceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecentDeviceStatus) ProtoMessage() {}

func (x *QueryRecentDeviceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecentDeviceStatus.ProtoReflect.Descriptor instead.
func (*QueryRecentDeviceStatus) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{45}
}

func (x *QueryRecentDeviceStatus) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *QueryRecentDeviceStatus) GetDeviceArray() [][]byte {
	if x != nil {
		return x.DeviceArray
	}
	return nil
}

type QueryRecentDeviceStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 最近连接设备状态列表
	RecentDeviceList []*QueryRecentDeviceStatusResponseRecentDeviceItem `protobuf:"bytes,3,rep,name=recent_device_list,json=recentDeviceList,proto3" json:"recent_device_list,omitempty"`
}

func (x *QueryRecentDeviceStatusResponse) Reset() {
	*x = QueryRecentDeviceStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRecentDeviceStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecentDeviceStatusResponse) ProtoMessage() {}

func (x *QueryRecentDeviceStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecentDeviceStatusResponse.ProtoReflect.Descriptor instead.
func (*QueryRecentDeviceStatusResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{46}
}

func (x *QueryRecentDeviceStatusResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *QueryRecentDeviceStatusResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *QueryRecentDeviceStatusResponse) GetRecentDeviceList() []*QueryRecentDeviceStatusResponseRecentDeviceItem {
	if x != nil {
		return x.RecentDeviceList
	}
	return nil
}

type GetDnsDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *GetDnsDomain) Reset() {
	*x = GetDnsDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsDomain) ProtoMessage() {}

func (x *GetDnsDomain) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsDomain.ProtoReflect.Descriptor instead.
func (*GetDnsDomain) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{47}
}

func (x *GetDnsDomain) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

type GetDnsDomainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// dns域名
	SdnRootDomain []byte `protobuf:"bytes,3,opt,name=sdn_root_domain,json=sdnRootDomain,proto3" json:"sdn_root_domain,omitempty"`
	// relay服务器域名
	RelayDomain []byte `protobuf:"bytes,4,opt,name=relay_domain,json=relayDomain,proto3" json:"relay_domain,omitempty"`
}

func (x *GetDnsDomainResponse) Reset() {
	*x = GetDnsDomainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDnsDomainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDnsDomainResponse) ProtoMessage() {}

func (x *GetDnsDomainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDnsDomainResponse.ProtoReflect.Descriptor instead.
func (*GetDnsDomainResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{48}
}

func (x *GetDnsDomainResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetDnsDomainResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *GetDnsDomainResponse) GetSdnRootDomain() []byte {
	if x != nil {
		return x.SdnRootDomain
	}
	return nil
}

func (x *GetDnsDomainResponse) GetRelayDomain() []byte {
	if x != nil {
		return x.RelayDomain
	}
	return nil
}

type CreateRoom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 受控端设备ID
	PeerDeviceId []byte `protobuf:"bytes,2,opt,name=peer_device_id,json=peerDeviceId,proto3" json:"peer_device_id,omitempty"`
}

func (x *CreateRoom) Reset() {
	*x = CreateRoom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoom) ProtoMessage() {}

func (x *CreateRoom) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoom.ProtoReflect.Descriptor instead.
func (*CreateRoom) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{49}
}

func (x *CreateRoom) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CreateRoom) GetPeerDeviceId() []byte {
	if x != nil {
		return x.PeerDeviceId
	}
	return nil
}

type CreateRoomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 房间号，当客户端接受时由服务器生成并填写
	RoomId []byte `protobuf:"bytes,3,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
}

func (x *CreateRoomResponse) Reset() {
	*x = CreateRoomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoomResponse) ProtoMessage() {}

func (x *CreateRoomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoomResponse.ProtoReflect.Descriptor instead.
func (*CreateRoomResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{50}
}

func (x *CreateRoomResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *CreateRoomResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *CreateRoomResponse) GetRoomId() []byte {
	if x != nil {
		return x.RoomId
	}
	return nil
}

type GetIceServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 序号
	Index int32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *GetIceServer) Reset() {
	*x = GetIceServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIceServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIceServer) ProtoMessage() {}

func (x *GetIceServer) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIceServer.ProtoReflect.Descriptor instead.
func (*GetIceServer) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{51}
}

func (x *GetIceServer) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetIceServer) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type GetIceServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
	// 服务器列表
	IceServerList []*GetIceServerResponseIceServer `protobuf:"bytes,3,rep,name=ice_server_list,json=iceServerList,proto3" json:"ice_server_list,omitempty"`
}

func (x *GetIceServerResponse) Reset() {
	*x = GetIceServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIceServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIceServerResponse) ProtoMessage() {}

func (x *GetIceServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIceServerResponse.ProtoReflect.Descriptor instead.
func (*GetIceServerResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{52}
}

func (x *GetIceServerResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GetIceServerResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

func (x *GetIceServerResponse) GetIceServerList() []*GetIceServerResponseIceServer {
	if x != nil {
		return x.IceServerList
	}
	return nil
}

type ForwardData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 房间号，客户端被多人远程时用于区分连接
	RoomId []byte `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 需要转发的消息类型
	DataType int32 `protobuf:"varint,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// 需要转发的消息内容
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ForwardData) Reset() {
	*x = ForwardData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardData) ProtoMessage() {}

func (x *ForwardData) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardData.ProtoReflect.Descriptor instead.
func (*ForwardData) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{53}
}

func (x *ForwardData) GetRoomId() []byte {
	if x != nil {
		return x.RoomId
	}
	return nil
}

func (x *ForwardData) GetDataType() int32 {
	if x != nil {
		return x.DataType
	}
	return 0
}

func (x *ForwardData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// 转发消息响应，仅需要在异常时返回给发送方
type ForwardDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 房间号，客户端被多人远程时用于区分连接
	RoomId []byte `protobuf:"bytes,1,opt,name=room_id,json=roomId,proto3" json:"room_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *ForwardDataResponse) Reset() {
	*x = ForwardDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardDataResponse) ProtoMessage() {}

func (x *ForwardDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardDataResponse.ProtoReflect.Descriptor instead.
func (*ForwardDataResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{54}
}

func (x *ForwardDataResponse) GetRoomId() []byte {
	if x != nil {
		return x.RoomId
	}
	return nil
}

func (x *ForwardDataResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

// 通过浏览器指纹生成设备码，如果已存在，则返回已存在的
type GenDeviceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 浏览器指纹
	Fingerprint []byte `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *GenDeviceCode) Reset() {
	*x = GenDeviceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenDeviceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenDeviceCode) ProtoMessage() {}

func (x *GenDeviceCode) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenDeviceCode.ProtoReflect.Descriptor instead.
func (*GenDeviceCode) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{55}
}

func (x *GenDeviceCode) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GenDeviceCode) GetFingerprint() []byte {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

type GenDeviceCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求时本地生成，接收端响应消息时返回
	MessageId int32 `protobuf:"varint,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// 设备id
	DeviceId []byte `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 错误码
	Error common.ErrorCode `protobuf:"varint,3,opt,name=error,proto3,enum=ErrorCode" json:"error,omitempty"`
}

func (x *GenDeviceCodeResponse) Reset() {
	*x = GenDeviceCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenDeviceCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenDeviceCodeResponse) ProtoMessage() {}

func (x *GenDeviceCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenDeviceCodeResponse.ProtoReflect.Descriptor instead.
func (*GenDeviceCodeResponse) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{56}
}

func (x *GenDeviceCodeResponse) GetMessageId() int32 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *GenDeviceCodeResponse) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *GenDeviceCodeResponse) GetError() common.ErrorCode {
	if x != nil {
		return x.Error
	}
	return common.ErrorCode_success
}

type GetGroupListResponseGroupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分组ID
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 分组名称
	GroupName []byte `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// 上级分组ID
	ParentId int32 `protobuf:"varint,3,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
}

func (x *GetGroupListResponseGroupItem) Reset() {
	*x = GetGroupListResponseGroupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupListResponseGroupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupListResponseGroupItem) ProtoMessage() {}

func (x *GetGroupListResponseGroupItem) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupListResponseGroupItem.ProtoReflect.Descriptor instead.
func (*GetGroupListResponseGroupItem) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetGroupListResponseGroupItem) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetGroupListResponseGroupItem) GetGroupName() []byte {
	if x != nil {
		return x.GroupName
	}
	return nil
}

func (x *GetGroupListResponseGroupItem) GetParentId() int32 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

type GetDeviceListResponseDeviceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 节点ID，由服务器生成的当前服务器唯一ID
	NodeId int32 `protobuf:"varint,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// 所属分组ID
	GroupId int32 `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	// 设备名称
	DeviceName []byte `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// 设备ID
	DeviceId []byte `protobuf:"bytes,4,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 设备Key
	DeviceKey []byte `protobuf:"bytes,5,opt,name=device_key,json=deviceKey,proto3" json:"device_key,omitempty"`
	// 设备登录的账号
	Account []byte `protobuf:"bytes,6,opt,name=account,proto3" json:"account,omitempty"`
	// 设备平台类型
	Platform common.PlatformType `protobuf:"varint,7,opt,name=platform,proto3,enum=PlatformType" json:"platform,omitempty"`
	// 设备IP
	DeviceIp []byte `protobuf:"bytes,8,opt,name=device_ip,json=deviceIp,proto3" json:"device_ip,omitempty"`
	// IP地址归属地
	IpAddr []byte `protobuf:"bytes,9,opt,name=ip_addr,json=ipAddr,proto3" json:"ip_addr,omitempty"`
	// 设备在线状态
	DeviceStatus GetDeviceListResponseDeviceStatusT `protobuf:"varint,10,opt,name=device_status,json=deviceStatus,proto3,enum=remote_desktop.GetDeviceListResponseDeviceStatusT" json:"device_status,omitempty"`
	// 记录最后更新时间
	UpdateTimestamp int32 `protobuf:"varint,11,opt,name=update_timestamp,json=updateTimestamp,proto3" json:"update_timestamp,omitempty"`
	// 设备mac地址
	MacAddress []byte `protobuf:"bytes,12,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// 设备版本号
	Version []byte `protobuf:"bytes,13,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetDeviceListResponseDeviceItem) Reset() {
	*x = GetDeviceListResponseDeviceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceListResponseDeviceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceListResponseDeviceItem) ProtoMessage() {}

func (x *GetDeviceListResponseDeviceItem) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceListResponseDeviceItem.ProtoReflect.Descriptor instead.
func (*GetDeviceListResponseDeviceItem) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetDeviceListResponseDeviceItem) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *GetDeviceListResponseDeviceItem) GetGroupId() int32 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *GetDeviceListResponseDeviceItem) GetDeviceName() []byte {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *GetDeviceListResponseDeviceItem) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *GetDeviceListResponseDeviceItem) GetDeviceKey() []byte {
	if x != nil {
		return x.DeviceKey
	}
	return nil
}

func (x *GetDeviceListResponseDeviceItem) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *GetDeviceListResponseDeviceItem) GetPlatform() common.PlatformType {
	if x != nil {
		return x.Platform
	}
	return common.PlatformType_windows
}

func (x *GetDeviceListResponseDeviceItem) GetDeviceIp() []byte {
	if x != nil {
		return x.DeviceIp
	}
	return nil
}

func (x *GetDeviceListResponseDeviceItem) GetIpAddr() []byte {
	if x != nil {
		return x.IpAddr
	}
	return nil
}

func (x *GetDeviceListResponseDeviceItem) GetDeviceStatus() GetDeviceListResponseDeviceStatusT {
	if x != nil {
		return x.DeviceStatus
	}
	return GetDeviceListResponse_offline
}

func (x *GetDeviceListResponseDeviceItem) GetUpdateTimestamp() int32 {
	if x != nil {
		return x.UpdateTimestamp
	}
	return 0
}

func (x *GetDeviceListResponseDeviceItem) GetMacAddress() []byte {
	if x != nil {
		return x.MacAddress
	}
	return nil
}

func (x *GetDeviceListResponseDeviceItem) GetVersion() []byte {
	if x != nil {
		return x.Version
	}
	return nil
}

type QueryRecentDeviceStatusResponseRecentDeviceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 设备ID
	DeviceId []byte `protobuf:"bytes,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// 设备平台类型
	Platform common.PlatformType `protobuf:"varint,2,opt,name=platform,proto3,enum=PlatformType" json:"platform,omitempty"`
	// 设备在线状态
	DeviceStatus QueryRecentDeviceStatusResponseDeviceStatusT `protobuf:"varint,3,opt,name=device_status,json=deviceStatus,proto3,enum=remote_desktop.QueryRecentDeviceStatusResponseDeviceStatusT" json:"device_status,omitempty"`
}

func (x *QueryRecentDeviceStatusResponseRecentDeviceItem) Reset() {
	*x = QueryRecentDeviceStatusResponseRecentDeviceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRecentDeviceStatusResponseRecentDeviceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRecentDeviceStatusResponseRecentDeviceItem) ProtoMessage() {}

func (x *QueryRecentDeviceStatusResponseRecentDeviceItem) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRecentDeviceStatusResponseRecentDeviceItem.ProtoReflect.Descriptor instead.
func (*QueryRecentDeviceStatusResponseRecentDeviceItem) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{46, 0}
}

func (x *QueryRecentDeviceStatusResponseRecentDeviceItem) GetDeviceId() []byte {
	if x != nil {
		return x.DeviceId
	}
	return nil
}

func (x *QueryRecentDeviceStatusResponseRecentDeviceItem) GetPlatform() common.PlatformType {
	if x != nil {
		return x.Platform
	}
	return common.PlatformType_windows
}

func (x *QueryRecentDeviceStatusResponseRecentDeviceItem) GetDeviceStatus() QueryRecentDeviceStatusResponseDeviceStatusT {
	if x != nil {
		return x.DeviceStatus
	}
	return QueryRecentDeviceStatusResponse_offline
}

type GetIceServerResponseIceServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 服务器地址，格式 [协议，stun/turn]:host:port， 例如： turn:turn.raylink.live:3478
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// 账号
	Account []byte `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// 密码
	Password []byte `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *GetIceServerResponseIceServer) Reset() {
	*x = GetIceServerResponseIceServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_remote_desktop_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIceServerResponseIceServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIceServerResponseIceServer) ProtoMessage() {}

func (x *GetIceServerResponseIceServer) ProtoReflect() protoreflect.Message {
	mi := &file_remote_desktop_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIceServerResponseIceServer.ProtoReflect.Descriptor instead.
func (*GetIceServerResponseIceServer) Descriptor() ([]byte, []int) {
	return file_remote_desktop_proto_rawDescGZIP(), []int{52, 0}
}

func (x *GetIceServerResponseIceServer) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *GetIceServerResponseIceServer) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *GetIceServerResponseIceServer) GetPassword() []byte {
	if x != nil {
		return x.Password
	}
	return nil
}

var File_remote_desktop_proto protoreflect.FileDescriptor

var file_remote_desktop_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x05, 0x68, 0x65, 0x61, 0x72, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x05,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x0e, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x83,
	0x03, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x61,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x6e,
	0x61, 0x74, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74,
	0x6f, 0x70, 0x2e, 0x4e, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x52,
	0x0b, 0x6e, 0x61, 0x74, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x22, 0x68, 0x0a, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x70, 0x22, 0xa6,
	0x01, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x64, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x64, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x46, 0x0a, 0x1f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x1b, 0x73, 0x65, 0x74, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x51, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xff, 0x01, 0x0a, 0x1c,
	0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x64, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x15,
	0x0a, 0x06, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x73, 0x64, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x46, 0x0a, 0x1f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x5c, 0x0a,
	0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x52, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x27, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x30, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x0e, 0x67, 0x65,
	0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x88, 0x02, 0x0a, 0x17,
	0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65,
	0x6d, 0x1a, 0x63, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x74, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x68, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x48,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x22, 0xc1, 0x05, 0x0a, 0x18, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xdf, 0x03, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x70, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x5d, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x2e, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a,
	0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x8b, 0x01, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x47, 0x0a,
	0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xc1, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x5c, 0x0a, 0x18, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x48, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x64, 0x6e, 0x5f,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa9,
	0x01, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x64, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x73,
	0x74, 0x75, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x75, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x74, 0x75, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xff, 0x02, 0x0a, 0x0b, 0x72,
	0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x72, 0x75, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x69, 0x6e, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6e, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x22, 0x72, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x68,
	0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x61, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x66, 0x66, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x10, 0x06, 0x22, 0x58, 0x0a, 0x14,
	0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x48, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x59, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x86, 0x01, 0x0a, 0x0e,
	0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x17, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xd0, 0x04, 0x0a, 0x17, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x62, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0c, 0x70, 0x65, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x64, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x64,
	0x6e, 0x5f, 0x69, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x64, 0x6e, 0x49,
	0x70, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x10, 0x01, 0x22, 0x3b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x72, 0x65, 0x65, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x10, 0x02, 0x22, 0x89, 0x01, 0x0a, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x85, 0x01, 0x0a, 0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x66, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xae, 0x02, 0x0a, 0x16, 0x67, 0x65, 0x74,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x74, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x36, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x72, 0x65, 0x65, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x66, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x02, 0x22, 0x99, 0x02, 0x0a, 0x18, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x64, 0x6e, 0x49, 0x64, 0x12, 0x5d, 0x0a, 0x0a,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f,
	0x70, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x73, 0x64, 0x6e, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x74, 0x48, 0x00, 0x52, 0x09, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x34, 0x0a, 0x10, 0x73, 0x64, 0x6e, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x74, 0x63, 0x70, 0x10, 0x02, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xe0, 0x05, 0x0a, 0x0c, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x13, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x02, 0x52, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x19, 0x72,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x16, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a,
	0x14, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x12, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x0b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a,
	0x73, 0x64, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x08, 0x52, 0x09, 0x73, 0x64, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x1c, 0x0a, 0x1a, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x20, 0x0a,
	0x1e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x42,
	0x17, 0x0a, 0x15, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x64,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x22, 0xe5, 0x01, 0x0a, 0x0f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x6e,
	0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x4e,
	0x41, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6e, 0x65,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6e, 0x65, 0x74, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x55, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x4c, 0x6f, 0x73, 0x73,
	0x22, 0x5c, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x3d,
	0x0a, 0x03, 0x77, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x22, 0x5f, 0x0a,
	0x1b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0x68,
	0x0a, 0x24, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5e, 0x0a, 0x1a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x22, 0xd3, 0x03, 0x0a, 0x23, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b,
	0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x74, 0x0a, 0x12, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0xc7, 0x01, 0x0a, 0x12, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x68, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x43, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x74, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x2a, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x01, 0x22, 0x2f,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22,
	0xa6, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x64, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x73, 0x64, 0x6e, 0x52, 0x6f, 0x6f, 0x74, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x61, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x52, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c,
	0x70, 0x65, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x14,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x22,
	0x45, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x95, 0x02, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x0f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x0d, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0x5c, 0x0a, 0x0a, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x58,
	0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x15, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x52, 0x0a,
	0x0f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x22, 0x79, 0x0a, 0x18, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0xd8, 0x01, 0x0a,
	0x0c, 0x4e, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x12, 0x20, 0x0a,
	0x1c, 0x4e, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x4e, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x2b, 0x0a, 0x27, 0x4e, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24,
	0x4e, 0x41, 0x54, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x4e, 0x41, 0x54, 0x5f, 0x42, 0x45,
	0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x41, 0x6e,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x04, 0x2a, 0x89, 0x01, 0x0a, 0x08, 0x4e, 0x41, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x41, 0x54, 0x5f, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x41, 0x54,
	0x5f, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x41, 0x54, 0x5f, 0x46, 0x75, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x65,
	0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x41, 0x54, 0x5f, 0x49, 0x70, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x41, 0x54, 0x5f,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x41, 0x54, 0x5f, 0x53, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x10, 0x05, 0x2a, 0xf6, 0x0c, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x6e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x10,
	0x64, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x66, 0x12, 0x13, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x10, 0x67, 0x12, 0x1c, 0x0a,
	0x18, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x68, 0x12, 0x1a, 0x0a, 0x16, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x64, 0x6e,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x69, 0x12, 0x23, 0x0a, 0x1f, 0x6d, 0x73, 0x67, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x64, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x6a, 0x12, 0x1b, 0x0a, 0x17,
	0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x64, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x6b, 0x12, 0x24, 0x0a, 0x20, 0x6d, 0x73, 0x67,
	0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x64, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x6c, 0x12,
	0x0d, 0x0a, 0x09, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x10, 0x6d, 0x12, 0x16,
	0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x10, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x6f,
	0x67, 0x6f, 0x75, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x70, 0x12,
	0x16, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x10, 0x71, 0x12, 0x1f, 0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x10, 0x73, 0x12, 0x1d,
	0x0a, 0x19, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x74, 0x12, 0x17, 0x0a,
	0x13, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x10, 0x75, 0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x76, 0x12, 0x12, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x5f,
	0x61, 0x64, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x77, 0x12, 0x1b, 0x0a, 0x17,
	0x6d, 0x73, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x78, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x73, 0x67,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x10, 0x79,
	0x12, 0x1e, 0x0a, 0x1a, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x7a,
	0x12, 0x17, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x7b, 0x12, 0x20, 0x0a, 0x1c, 0x6d, 0x73, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x7c, 0x12, 0x19, 0x0a, 0x15, 0x6d,
	0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x64, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x10, 0x7d, 0x12, 0x22, 0x0a, 0x1e, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x73, 0x64, 0x6e, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x7e, 0x12, 0x13, 0x0a, 0x0f, 0x6d, 0x73,
	0x67, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x7f, 0x12,
	0x1d, 0x0a, 0x18, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x80, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0x81, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x82, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x83, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x84, 0x01,
	0x12, 0x20, 0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x10,
	0x85, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x86, 0x01, 0x12, 0x18, 0x0a,
	0x13, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x10, 0x87, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x6d, 0x73, 0x67, 0x5f, 0x67,
	0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x88, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x89, 0x01,
	0x12, 0x21, 0x0a, 0x1c, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x10, 0x8a, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x8b, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x6d, 0x73,
	0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x10, 0x8c, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x8d, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x5f, 0x77,
	0x6f, 0x6c, 0x10, 0x8e, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x8f, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x6d,
	0x73, 0x67, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x90, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x6d, 0x73,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0x91, 0x01, 0x12,
	0x2c, 0x0a, 0x27, 0x6d, 0x73, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x92, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x10, 0x93, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x64, 0x6e, 0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x94, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x6d, 0x10, 0x95, 0x01, 0x12, 0x1d,
	0x0a, 0x18, 0x6d, 0x73, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f,
	0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x96, 0x01, 0x12, 0x17, 0x0a,
	0x12, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x10, 0x97, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x5f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x98, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x6d, 0x73, 0x67, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x10, 0x99, 0x01, 0x12,
	0x1e, 0x0a, 0x19, 0x6d, 0x73, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9a, 0x01, 0x12,
	0x18, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x9b, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x6d, 0x73, 0x67,
	0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x9c, 0x01, 0x2a, 0xd1, 0x02, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a,
	0x08, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x61,
	0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x68, 0x75, 0x61,
	0x77, 0x65, 0x69, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x78, 0x69, 0x61, 0x6f, 0x6d, 0x69, 0x10,
	0x03, 0x12, 0x08, 0x0a, 0x04, 0x76, 0x69, 0x76, 0x6f, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x6f,
	0x70, 0x70, 0x6f, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x71, 0x71, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x77, 0x69, 0x6e, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x6e, 0x10, 0x08, 0x12, 0x10,
	0x0a, 0x0c, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x10, 0x09,
	0x12, 0x14, 0x0a, 0x10, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x64,
	0x72, 0x6f, 0x69, 0x64, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x77, 0x65, 0x62, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08,
	0x62, 0x69, 0x6c, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x77,
	0x6f, 0x6e, 0x64, 0x65, 0x72, 0x66, 0x75, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x10, 0x0f, 0x12, 0x10,
	0x0a, 0x0c, 0x71, 0x69, 0x6e, 0x67, 0x6a, 0x69, 0x61, 0x6f, 0x5f, 0x62, 0x6f, 0x78, 0x10, 0x10,
	0x12, 0x13, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x65, 0x61, 0x73, 0x5f, 0x78, 0x69, 0x61,
	0x6f, 0x6d, 0x69, 0x10, 0x11, 0x12, 0x13, 0x0a, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x73, 0x65, 0x61,
	0x73, 0x5f, 0x68, 0x75, 0x61, 0x77, 0x65, 0x69, 0x10, 0x12, 0x12, 0x14, 0x0a, 0x10, 0x6f, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x61, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x73, 0x75, 0x6e, 0x67, 0x10, 0x13,
	0x42, 0x38, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x72, 0x61, 0x79, 0x2e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x6f, 0x42, 0x0d, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x5a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x6b, 0x74, 0x6f, 0x70, 0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_remote_desktop_proto_rawDescOnce sync.Once
	file_remote_desktop_proto_rawDescData = file_remote_desktop_proto_rawDesc
)

func file_remote_desktop_proto_rawDescGZIP() []byte {
	file_remote_desktop_proto_rawDescOnce.Do(func() {
		file_remote_desktop_proto_rawDescData = protoimpl.X.CompressGZIP(file_remote_desktop_proto_rawDescData)
	})
	return file_remote_desktop_proto_rawDescData
}

var file_remote_desktop_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_remote_desktop_proto_msgTypes = make([]protoimpl.MessageInfo, 61)
var file_remote_desktop_proto_goTypes = []interface{}{
	(NAT_BEHAVIOR)(0),                                       // 0: remote_desktop.NAT_BEHAVIOR
	(NAT_TYPE)(0),                                           // 1: remote_desktop.NAT_TYPE
	(MessageType)(0),                                        // 2: remote_desktop.message_type
	(ChannelType)(0),                                        // 3: remote_desktop.channel_type
	(GetDeviceListResponseDeviceStatusT)(0),                 // 4: remote_desktop.get_device_list_response.device_status_t
	(RunCommandCommandTypeT)(0),                             // 5: remote_desktop.run_command.command_type_t
	(ReportConnectionEventEventTypeT)(0),                    // 6: remote_desktop.report_connection_event.event_type_t
	(ReportConnectionEventConnectionTypeT)(0),               // 7: remote_desktop.report_connection_event.connection_type_t
	(GetUserInfoResponseAccountTypeT)(0),                    // 8: remote_desktop.get_user_info_response.account_type_t
	(ReportConnectionStatusSdnRouteTypeT)(0),                // 9: remote_desktop.report_connection_status.sdn_route_type_t
	(QueryRecentDeviceStatusResponseDeviceStatusT)(0),       // 10: remote_desktop.query_recent_device_status_response.device_status_t
	(*Heart)(nil),                                           // 11: remote_desktop.heart
	(*Check)(nil),                                           // 12: remote_desktop.check
	(*CheckResponse)(nil),                                   // 13: remote_desktop.check_response
	(*RegisterId)(nil),                                      // 14: remote_desktop.register_id
	(*RegisterIdResponse)(nil),                              // 15: remote_desktop.register_id_response
	(*SetLocalSdnInfo)(nil),                                 // 16: remote_desktop.set_local_sdn_info
	(*SetLocalSdnInfoResponse)(nil),                         // 17: remote_desktop.set_local_sdn_info_response
	(*GetDeviceSdnInfo)(nil),                                // 18: remote_desktop.get_device_sdn_info
	(*GetDeviceSdnInfoResponse)(nil),                        // 19: remote_desktop.get_device_sdn_info_response
	(*Login)(nil),                                           // 20: remote_desktop.login
	(*LoginResponse)(nil),                                   // 21: remote_desktop.login_response
	(*Logout)(nil),                                          // 22: remote_desktop.logout
	(*LogoutResponse)(nil),                                  // 23: remote_desktop.logout_response
	(*GetGroupList)(nil),                                    // 24: remote_desktop.get_group_list
	(*GetGroupListResponse)(nil),                            // 25: remote_desktop.get_group_list_response
	(*CreateGroup)(nil),                                     // 26: remote_desktop.create_group
	(*CreateGroupResponse)(nil),                             // 27: remote_desktop.create_group_response
	(*GetDeviceList)(nil),                                   // 28: remote_desktop.get_device_list
	(*GetDeviceListResponse)(nil),                           // 29: remote_desktop.get_device_list_response
	(*AddDevice)(nil),                                       // 30: remote_desktop.add_device
	(*AddDeviceResponse)(nil),                               // 31: remote_desktop.add_device_response
	(*DeleteDevice)(nil),                                    // 32: remote_desktop.delete_device
	(*DeleteDeviceResponse)(nil),                            // 33: remote_desktop.delete_device_response
	(*SetDeviceInfo)(nil),                                   // 34: remote_desktop.set_device_info
	(*SetDeviceInfoResponse)(nil),                           // 35: remote_desktop.set_device_info_response
	(*GetSdnRootInfo)(nil),                                  // 36: remote_desktop.get_sdn_root_info
	(*GetSdnRootInfoResponse)(nil),                          // 37: remote_desktop.get_sdn_root_info_response
	(*RunCommand)(nil),                                      // 38: remote_desktop.run_command
	(*RunCommandResponse)(nil),                              // 39: remote_desktop.run_command_response
	(*DeleteGroup)(nil),                                     // 40: remote_desktop.delete_group
	(*DeleteGroupResponse)(nil),                             // 41: remote_desktop.delete_group_response
	(*SetGroupInfo)(nil),                                    // 42: remote_desktop.set_group_info
	(*SetGroupInfoResponse)(nil),                            // 43: remote_desktop.set_group_info_response
	(*ReportConnectionEvent)(nil),                           // 44: remote_desktop.report_connection_event
	(*ReportConnectionEventResponse)(nil),                   // 45: remote_desktop.report_connection_event_response
	(*LicenseChanged)(nil),                                  // 46: remote_desktop.license_changed
	(*GetUserInfo)(nil),                                     // 47: remote_desktop.get_user_info
	(*GetUserInfoResponse)(nil),                             // 48: remote_desktop.get_user_info_response
	(*ReportConnectionStatus)(nil),                          // 49: remote_desktop.report_connection_status
	(*PushMessage)(nil),                                     // 50: remote_desktop.push_message
	(*ReportNetInfo)(nil),                                   // 51: remote_desktop.report_net_info
	(*ReportNetInfoResponse)(nil),                           // 52: remote_desktop.report_net_info_response
	(*Wol)(nil),                                             // 53: remote_desktop.wol
	(*SubscribeRecentConnection)(nil),                       // 54: remote_desktop.subscribe_recent_connection
	(*SubscribeRecentConnectionResponse)(nil),               // 55: remote_desktop.subscribe_recent_connection_response
	(*QueryRecentDeviceStatus)(nil),                         // 56: remote_desktop.query_recent_device_status
	(*QueryRecentDeviceStatusResponse)(nil),                 // 57: remote_desktop.query_recent_device_status_response
	(*GetDnsDomain)(nil),                                    // 58: remote_desktop.get_dns_domain
	(*GetDnsDomainResponse)(nil),                            // 59: remote_desktop.get_dns_domain_response
	(*CreateRoom)(nil),                                      // 60: remote_desktop.create_room
	(*CreateRoomResponse)(nil),                              // 61: remote_desktop.create_room_response
	(*GetIceServer)(nil),                                    // 62: remote_desktop.get_ice_server
	(*GetIceServerResponse)(nil),                            // 63: remote_desktop.get_ice_server_response
	(*ForwardData)(nil),                                     // 64: remote_desktop.forward_data
	(*ForwardDataResponse)(nil),                             // 65: remote_desktop.forward_data_response
	(*GenDeviceCode)(nil),                                   // 66: remote_desktop.gen_device_code
	(*GenDeviceCodeResponse)(nil),                           // 67: remote_desktop.gen_device_code_response
	(*GetGroupListResponseGroupItem)(nil),                   // 68: remote_desktop.get_group_list_response.group_item
	(*GetDeviceListResponseDeviceItem)(nil),                 // 69: remote_desktop.get_device_list_response.device_item
	(*QueryRecentDeviceStatusResponseRecentDeviceItem)(nil), // 70: remote_desktop.query_recent_device_status_response.recent_device_item
	(*GetIceServerResponseIceServer)(nil),                   // 71: remote_desktop.get_ice_server_response.ice_server
	(common.PlatformType)(0),                                // 72: platform_type
	(common.ErrorCode)(0),                                   // 73: error_code
}
var file_remote_desktop_proto_depIdxs = []int32{
	72, // 0: remote_desktop.check.platform:type_name -> platform_type
	73, // 1: remote_desktop.check_response.error:type_name -> error_code
	72, // 2: remote_desktop.register_id.platform:type_name -> platform_type
	0,  // 3: remote_desktop.register_id.nat_behavior:type_name -> remote_desktop.NAT_BEHAVIOR
	3,  // 4: remote_desktop.register_id.channel:type_name -> remote_desktop.channel_type
	73, // 5: remote_desktop.register_id_response.error:type_name -> error_code
	73, // 6: remote_desktop.set_local_sdn_info_response.error:type_name -> error_code
	73, // 7: remote_desktop.get_device_sdn_info_response.error:type_name -> error_code
	72, // 8: remote_desktop.get_device_sdn_info_response.platform:type_name -> platform_type
	73, // 9: remote_desktop.login_response.error:type_name -> error_code
	73, // 10: remote_desktop.get_group_list_response.error:type_name -> error_code
	68, // 11: remote_desktop.get_group_list_response.item:type_name -> remote_desktop.get_group_list_response.group_item
	73, // 12: remote_desktop.create_group_response.error:type_name -> error_code
	73, // 13: remote_desktop.get_device_list_response.error:type_name -> error_code
	69, // 14: remote_desktop.get_device_list_response.device_list:type_name -> remote_desktop.get_device_list_response.device_item
	73, // 15: remote_desktop.add_device_response.error:type_name -> error_code
	73, // 16: remote_desktop.delete_device_response.error:type_name -> error_code
	73, // 17: remote_desktop.set_device_info_response.error:type_name -> error_code
	5,  // 18: remote_desktop.run_command.command_type:type_name -> remote_desktop.run_command.command_type_t
	73, // 19: remote_desktop.run_command_response.error:type_name -> error_code
	73, // 20: remote_desktop.delete_group_response.error:type_name -> error_code
	73, // 21: remote_desktop.set_group_info_response.error:type_name -> error_code
	6,  // 22: remote_desktop.report_connection_event.event_type:type_name -> remote_desktop.report_connection_event.event_type_t
	7,  // 23: remote_desktop.report_connection_event.connection_type:type_name -> remote_desktop.report_connection_event.connection_type_t
	73, // 24: remote_desktop.report_connection_event_response.error:type_name -> error_code
	73, // 25: remote_desktop.get_user_info_response.error:type_name -> error_code
	8,  // 26: remote_desktop.get_user_info_response.account_type:type_name -> remote_desktop.get_user_info_response.account_type_t
	9,  // 27: remote_desktop.report_connection_status.route_type:type_name -> remote_desktop.report_connection_status.sdn_route_type_t
	1,  // 28: remote_desktop.report_net_info.nat_type:type_name -> remote_desktop.NAT_TYPE
	73, // 29: remote_desktop.report_net_info_response.error:type_name -> error_code
	73, // 30: remote_desktop.subscribe_recent_connection_response.error:type_name -> error_code
	73, // 31: remote_desktop.query_recent_device_status_response.error:type_name -> error_code
	70, // 32: remote_desktop.query_recent_device_status_response.recent_device_list:type_name -> remote_desktop.query_recent_device_status_response.recent_device_item
	73, // 33: remote_desktop.get_dns_domain_response.error:type_name -> error_code
	73, // 34: remote_desktop.create_room_response.error:type_name -> error_code
	73, // 35: remote_desktop.get_ice_server_response.error:type_name -> error_code
	71, // 36: remote_desktop.get_ice_server_response.ice_server_list:type_name -> remote_desktop.get_ice_server_response.ice_server
	73, // 37: remote_desktop.forward_data_response.error:type_name -> error_code
	73, // 38: remote_desktop.gen_device_code_response.error:type_name -> error_code
	72, // 39: remote_desktop.get_device_list_response.device_item.platform:type_name -> platform_type
	4,  // 40: remote_desktop.get_device_list_response.device_item.device_status:type_name -> remote_desktop.get_device_list_response.device_status_t
	72, // 41: remote_desktop.query_recent_device_status_response.recent_device_item.platform:type_name -> platform_type
	10, // 42: remote_desktop.query_recent_device_status_response.recent_device_item.device_status:type_name -> remote_desktop.query_recent_device_status_response.device_status_t
	43, // [43:43] is the sub-list for method output_type
	43, // [43:43] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_remote_desktop_proto_init() }
func file_remote_desktop_proto_init() {
	if File_remote_desktop_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_remote_desktop_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Check); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLocalSdnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLocalSdnInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceSdnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceSdnInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSdnRootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSdnRootInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGroupInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportConnectionEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportConnectionEventResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportConnectionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportNetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportNetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRecentConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRecentConnectionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRecentDeviceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRecentDeviceStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDnsDomainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIceServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIceServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenDeviceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenDeviceCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGroupListResponseGroupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceListResponseDeviceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRecentDeviceStatusResponseRecentDeviceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_remote_desktop_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIceServerResponseIceServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_remote_desktop_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_remote_desktop_proto_msgTypes[39].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_remote_desktop_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   61,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_remote_desktop_proto_goTypes,
		DependencyIndexes: file_remote_desktop_proto_depIdxs,
		EnumInfos:         file_remote_desktop_proto_enumTypes,
		MessageInfos:      file_remote_desktop_proto_msgTypes,
	}.Build()
	File_remote_desktop_proto = out.File
	file_remote_desktop_proto_rawDesc = nil
	file_remote_desktop_proto_goTypes = nil
	file_remote_desktop_proto_depIdxs = nil
}
